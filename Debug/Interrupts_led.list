
Interrupts_led.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001f88  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08002110  08002110  00012110  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002150  08002150  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002150  08002150  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002150  08002150  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002150  08002150  00012150  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002154  08002154  00012154  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002158  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000060  2000000c  08002164  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000006c  08002164  0002006c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009f61  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000153b  00000000  00000000  00029f9d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ac8  00000000  00000000  0002b4d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a10  00000000  00000000  0002bfa0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000253e4  00000000  00000000  0002c9b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007761  00000000  00000000  00051d94  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e8ec1  00000000  00000000  000594f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001423b6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c5c  00000000  00000000  00142434  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080020f8 	.word	0x080020f8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080020f8 	.word	0x080020f8

080001c8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]

	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80001d0:	2120      	movs	r1, #32
 80001d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80001d6:	f000 fd03 	bl	8000be0 <HAL_GPIO_TogglePin>
}
 80001da:	bf00      	nop
 80001dc:	3708      	adds	r7, #8
 80001de:	46bd      	mov	sp, r7
 80001e0:	bd80      	pop	{r7, pc}
	...

080001e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001e4:	b580      	push	{r7, lr}
 80001e6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001e8:	f000 f9b7 	bl	800055a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001ec:	f000 f80a 	bl	8000204 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001f0:	f000 f89c 	bl	800032c <MX_GPIO_Init>
  MX_TIM2_Init();
 80001f4:	f000 f84c 	bl	8000290 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80001f8:	4801      	ldr	r0, [pc, #4]	; (8000200 <main+0x1c>)
 80001fa:	f001 fb4d 	bl	8001898 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001fe:	e7fe      	b.n	80001fe <main+0x1a>
 8000200:	20000028 	.word	0x20000028

08000204 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	b096      	sub	sp, #88	; 0x58
 8000208:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800020a:	f107 0314 	add.w	r3, r7, #20
 800020e:	2244      	movs	r2, #68	; 0x44
 8000210:	2100      	movs	r1, #0
 8000212:	4618      	mov	r0, r3
 8000214:	f001 ff68 	bl	80020e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000218:	463b      	mov	r3, r7
 800021a:	2200      	movs	r2, #0
 800021c:	601a      	str	r2, [r3, #0]
 800021e:	605a      	str	r2, [r3, #4]
 8000220:	609a      	str	r2, [r3, #8]
 8000222:	60da      	str	r2, [r3, #12]
 8000224:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000226:	2310      	movs	r3, #16
 8000228:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800022a:	2301      	movs	r3, #1
 800022c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800022e:	2300      	movs	r3, #0
 8000230:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8000232:	2350      	movs	r3, #80	; 0x50
 8000234:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000236:	2300      	movs	r3, #0
 8000238:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800023a:	f107 0314 	add.w	r3, r7, #20
 800023e:	4618      	mov	r0, r3
 8000240:	f000 fd4c 	bl	8000cdc <HAL_RCC_OscConfig>
 8000244:	4603      	mov	r3, r0
 8000246:	2b00      	cmp	r3, #0
 8000248:	d001      	beq.n	800024e <SystemClock_Config+0x4a>
  {
    Error_Handler();
 800024a:	f000 f89f 	bl	800038c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800024e:	230f      	movs	r3, #15
 8000250:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000252:	2300      	movs	r3, #0
 8000254:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000256:	2300      	movs	r3, #0
 8000258:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800025a:	2300      	movs	r3, #0
 800025c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800025e:	2300      	movs	r3, #0
 8000260:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000262:	463b      	mov	r3, r7
 8000264:	2100      	movs	r1, #0
 8000266:	4618      	mov	r0, r3
 8000268:	f001 f91e 	bl	80014a8 <HAL_RCC_ClockConfig>
 800026c:	4603      	mov	r3, r0
 800026e:	2b00      	cmp	r3, #0
 8000270:	d001      	beq.n	8000276 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000272:	f000 f88b 	bl	800038c <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000276:	f44f 7000 	mov.w	r0, #512	; 0x200
 800027a:	f000 fcd9 	bl	8000c30 <HAL_PWREx_ControlVoltageScaling>
 800027e:	4603      	mov	r3, r0
 8000280:	2b00      	cmp	r3, #0
 8000282:	d001      	beq.n	8000288 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000284:	f000 f882 	bl	800038c <Error_Handler>
  }
}
 8000288:	bf00      	nop
 800028a:	3758      	adds	r7, #88	; 0x58
 800028c:	46bd      	mov	sp, r7
 800028e:	bd80      	pop	{r7, pc}

08000290 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	b088      	sub	sp, #32
 8000294:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000296:	f107 0310 	add.w	r3, r7, #16
 800029a:	2200      	movs	r2, #0
 800029c:	601a      	str	r2, [r3, #0]
 800029e:	605a      	str	r2, [r3, #4]
 80002a0:	609a      	str	r2, [r3, #8]
 80002a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002a4:	1d3b      	adds	r3, r7, #4
 80002a6:	2200      	movs	r2, #0
 80002a8:	601a      	str	r2, [r3, #0]
 80002aa:	605a      	str	r2, [r3, #4]
 80002ac:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80002ae:	4b1e      	ldr	r3, [pc, #120]	; (8000328 <MX_TIM2_Init+0x98>)
 80002b0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80002b4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1000;
 80002b6:	4b1c      	ldr	r3, [pc, #112]	; (8000328 <MX_TIM2_Init+0x98>)
 80002b8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80002bc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80002be:	4b1a      	ldr	r3, [pc, #104]	; (8000328 <MX_TIM2_Init+0x98>)
 80002c0:	2200      	movs	r2, #0
 80002c2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 80002c4:	4b18      	ldr	r3, [pc, #96]	; (8000328 <MX_TIM2_Init+0x98>)
 80002c6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80002ca:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80002cc:	4b16      	ldr	r3, [pc, #88]	; (8000328 <MX_TIM2_Init+0x98>)
 80002ce:	2200      	movs	r2, #0
 80002d0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80002d2:	4b15      	ldr	r3, [pc, #84]	; (8000328 <MX_TIM2_Init+0x98>)
 80002d4:	2200      	movs	r2, #0
 80002d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80002d8:	4813      	ldr	r0, [pc, #76]	; (8000328 <MX_TIM2_Init+0x98>)
 80002da:	f001 fab1 	bl	8001840 <HAL_TIM_Base_Init>
 80002de:	4603      	mov	r3, r0
 80002e0:	2b00      	cmp	r3, #0
 80002e2:	d001      	beq.n	80002e8 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 80002e4:	f000 f852 	bl	800038c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80002e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80002ec:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80002ee:	f107 0310 	add.w	r3, r7, #16
 80002f2:	4619      	mov	r1, r3
 80002f4:	480c      	ldr	r0, [pc, #48]	; (8000328 <MX_TIM2_Init+0x98>)
 80002f6:	f001 fc18 	bl	8001b2a <HAL_TIM_ConfigClockSource>
 80002fa:	4603      	mov	r3, r0
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d001      	beq.n	8000304 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8000300:	f000 f844 	bl	800038c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000304:	2300      	movs	r3, #0
 8000306:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000308:	2300      	movs	r3, #0
 800030a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800030c:	1d3b      	adds	r3, r7, #4
 800030e:	4619      	mov	r1, r3
 8000310:	4805      	ldr	r0, [pc, #20]	; (8000328 <MX_TIM2_Init+0x98>)
 8000312:	f001 fe1f 	bl	8001f54 <HAL_TIMEx_MasterConfigSynchronization>
 8000316:	4603      	mov	r3, r0
 8000318:	2b00      	cmp	r3, #0
 800031a:	d001      	beq.n	8000320 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 800031c:	f000 f836 	bl	800038c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000320:	bf00      	nop
 8000322:	3720      	adds	r7, #32
 8000324:	46bd      	mov	sp, r7
 8000326:	bd80      	pop	{r7, pc}
 8000328:	20000028 	.word	0x20000028

0800032c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	b086      	sub	sp, #24
 8000330:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000332:	1d3b      	adds	r3, r7, #4
 8000334:	2200      	movs	r2, #0
 8000336:	601a      	str	r2, [r3, #0]
 8000338:	605a      	str	r2, [r3, #4]
 800033a:	609a      	str	r2, [r3, #8]
 800033c:	60da      	str	r2, [r3, #12]
 800033e:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000340:	4b11      	ldr	r3, [pc, #68]	; (8000388 <MX_GPIO_Init+0x5c>)
 8000342:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000344:	4a10      	ldr	r2, [pc, #64]	; (8000388 <MX_GPIO_Init+0x5c>)
 8000346:	f043 0301 	orr.w	r3, r3, #1
 800034a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800034c:	4b0e      	ldr	r3, [pc, #56]	; (8000388 <MX_GPIO_Init+0x5c>)
 800034e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000350:	f003 0301 	and.w	r3, r3, #1
 8000354:	603b      	str	r3, [r7, #0]
 8000356:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000358:	2200      	movs	r2, #0
 800035a:	2120      	movs	r1, #32
 800035c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000360:	f000 fc26 	bl	8000bb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000364:	2320      	movs	r3, #32
 8000366:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000368:	2301      	movs	r3, #1
 800036a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800036c:	2300      	movs	r3, #0
 800036e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000370:	2300      	movs	r3, #0
 8000372:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000374:	1d3b      	adds	r3, r7, #4
 8000376:	4619      	mov	r1, r3
 8000378:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800037c:	f000 fa70 	bl	8000860 <HAL_GPIO_Init>

}
 8000380:	bf00      	nop
 8000382:	3718      	adds	r7, #24
 8000384:	46bd      	mov	sp, r7
 8000386:	bd80      	pop	{r7, pc}
 8000388:	40021000 	.word	0x40021000

0800038c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800038c:	b480      	push	{r7}
 800038e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000390:	bf00      	nop
 8000392:	46bd      	mov	sp, r7
 8000394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000398:	4770      	bx	lr
	...

0800039c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800039c:	b480      	push	{r7}
 800039e:	b083      	sub	sp, #12
 80003a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003a2:	4b0f      	ldr	r3, [pc, #60]	; (80003e0 <HAL_MspInit+0x44>)
 80003a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80003a6:	4a0e      	ldr	r2, [pc, #56]	; (80003e0 <HAL_MspInit+0x44>)
 80003a8:	f043 0301 	orr.w	r3, r3, #1
 80003ac:	6613      	str	r3, [r2, #96]	; 0x60
 80003ae:	4b0c      	ldr	r3, [pc, #48]	; (80003e0 <HAL_MspInit+0x44>)
 80003b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80003b2:	f003 0301 	and.w	r3, r3, #1
 80003b6:	607b      	str	r3, [r7, #4]
 80003b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003ba:	4b09      	ldr	r3, [pc, #36]	; (80003e0 <HAL_MspInit+0x44>)
 80003bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80003be:	4a08      	ldr	r2, [pc, #32]	; (80003e0 <HAL_MspInit+0x44>)
 80003c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003c4:	6593      	str	r3, [r2, #88]	; 0x58
 80003c6:	4b06      	ldr	r3, [pc, #24]	; (80003e0 <HAL_MspInit+0x44>)
 80003c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80003ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003ce:	603b      	str	r3, [r7, #0]
 80003d0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003d2:	bf00      	nop
 80003d4:	370c      	adds	r7, #12
 80003d6:	46bd      	mov	sp, r7
 80003d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003dc:	4770      	bx	lr
 80003de:	bf00      	nop
 80003e0:	40021000 	.word	0x40021000

080003e4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	b084      	sub	sp, #16
 80003e8:	af00      	add	r7, sp, #0
 80003ea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	681b      	ldr	r3, [r3, #0]
 80003f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80003f4:	d113      	bne.n	800041e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80003f6:	4b0c      	ldr	r3, [pc, #48]	; (8000428 <HAL_TIM_Base_MspInit+0x44>)
 80003f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80003fa:	4a0b      	ldr	r2, [pc, #44]	; (8000428 <HAL_TIM_Base_MspInit+0x44>)
 80003fc:	f043 0301 	orr.w	r3, r3, #1
 8000400:	6593      	str	r3, [r2, #88]	; 0x58
 8000402:	4b09      	ldr	r3, [pc, #36]	; (8000428 <HAL_TIM_Base_MspInit+0x44>)
 8000404:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000406:	f003 0301 	and.w	r3, r3, #1
 800040a:	60fb      	str	r3, [r7, #12]
 800040c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800040e:	2200      	movs	r2, #0
 8000410:	2100      	movs	r1, #0
 8000412:	201c      	movs	r0, #28
 8000414:	f000 f9ed 	bl	80007f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000418:	201c      	movs	r0, #28
 800041a:	f000 fa06 	bl	800082a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800041e:	bf00      	nop
 8000420:	3710      	adds	r7, #16
 8000422:	46bd      	mov	sp, r7
 8000424:	bd80      	pop	{r7, pc}
 8000426:	bf00      	nop
 8000428:	40021000 	.word	0x40021000

0800042c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800042c:	b480      	push	{r7}
 800042e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000430:	bf00      	nop
 8000432:	46bd      	mov	sp, r7
 8000434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000438:	4770      	bx	lr

0800043a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800043a:	b480      	push	{r7}
 800043c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800043e:	e7fe      	b.n	800043e <HardFault_Handler+0x4>

08000440 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000440:	b480      	push	{r7}
 8000442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000444:	e7fe      	b.n	8000444 <MemManage_Handler+0x4>

08000446 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000446:	b480      	push	{r7}
 8000448:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800044a:	e7fe      	b.n	800044a <BusFault_Handler+0x4>

0800044c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800044c:	b480      	push	{r7}
 800044e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000450:	e7fe      	b.n	8000450 <UsageFault_Handler+0x4>

08000452 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000452:	b480      	push	{r7}
 8000454:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000456:	bf00      	nop
 8000458:	46bd      	mov	sp, r7
 800045a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800045e:	4770      	bx	lr

08000460 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000460:	b480      	push	{r7}
 8000462:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000464:	bf00      	nop
 8000466:	46bd      	mov	sp, r7
 8000468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800046c:	4770      	bx	lr

0800046e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800046e:	b480      	push	{r7}
 8000470:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000472:	bf00      	nop
 8000474:	46bd      	mov	sp, r7
 8000476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800047a:	4770      	bx	lr

0800047c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000480:	f000 f8be 	bl	8000600 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000484:	bf00      	nop
 8000486:	bd80      	pop	{r7, pc}

08000488 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800048c:	4802      	ldr	r0, [pc, #8]	; (8000498 <TIM2_IRQHandler+0x10>)
 800048e:	f001 fa2d 	bl	80018ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000492:	bf00      	nop
 8000494:	bd80      	pop	{r7, pc}
 8000496:	bf00      	nop
 8000498:	20000028 	.word	0x20000028

0800049c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800049c:	b480      	push	{r7}
 800049e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80004a0:	4b17      	ldr	r3, [pc, #92]	; (8000500 <SystemInit+0x64>)
 80004a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80004a6:	4a16      	ldr	r2, [pc, #88]	; (8000500 <SystemInit+0x64>)
 80004a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80004ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80004b0:	4b14      	ldr	r3, [pc, #80]	; (8000504 <SystemInit+0x68>)
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	4a13      	ldr	r2, [pc, #76]	; (8000504 <SystemInit+0x68>)
 80004b6:	f043 0301 	orr.w	r3, r3, #1
 80004ba:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80004bc:	4b11      	ldr	r3, [pc, #68]	; (8000504 <SystemInit+0x68>)
 80004be:	2200      	movs	r2, #0
 80004c0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80004c2:	4b10      	ldr	r3, [pc, #64]	; (8000504 <SystemInit+0x68>)
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	4a0f      	ldr	r2, [pc, #60]	; (8000504 <SystemInit+0x68>)
 80004c8:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80004cc:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80004d0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80004d2:	4b0c      	ldr	r3, [pc, #48]	; (8000504 <SystemInit+0x68>)
 80004d4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80004d8:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80004da:	4b0a      	ldr	r3, [pc, #40]	; (8000504 <SystemInit+0x68>)
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	4a09      	ldr	r2, [pc, #36]	; (8000504 <SystemInit+0x68>)
 80004e0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80004e4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80004e6:	4b07      	ldr	r3, [pc, #28]	; (8000504 <SystemInit+0x68>)
 80004e8:	2200      	movs	r2, #0
 80004ea:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80004ec:	4b04      	ldr	r3, [pc, #16]	; (8000500 <SystemInit+0x64>)
 80004ee:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80004f2:	609a      	str	r2, [r3, #8]
#endif
}
 80004f4:	bf00      	nop
 80004f6:	46bd      	mov	sp, r7
 80004f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop
 8000500:	e000ed00 	.word	0xe000ed00
 8000504:	40021000 	.word	0x40021000

08000508 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000508:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000540 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800050c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800050e:	e003      	b.n	8000518 <LoopCopyDataInit>

08000510 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000510:	4b0c      	ldr	r3, [pc, #48]	; (8000544 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000512:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000514:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000516:	3104      	adds	r1, #4

08000518 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000518:	480b      	ldr	r0, [pc, #44]	; (8000548 <LoopForever+0xa>)
	ldr	r3, =_edata
 800051a:	4b0c      	ldr	r3, [pc, #48]	; (800054c <LoopForever+0xe>)
	adds	r2, r0, r1
 800051c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800051e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000520:	d3f6      	bcc.n	8000510 <CopyDataInit>
	ldr	r2, =_sbss
 8000522:	4a0b      	ldr	r2, [pc, #44]	; (8000550 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000524:	e002      	b.n	800052c <LoopFillZerobss>

08000526 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000526:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000528:	f842 3b04 	str.w	r3, [r2], #4

0800052c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800052c:	4b09      	ldr	r3, [pc, #36]	; (8000554 <LoopForever+0x16>)
	cmp	r2, r3
 800052e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000530:	d3f9      	bcc.n	8000526 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000532:	f7ff ffb3 	bl	800049c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000536:	f001 fdb3 	bl	80020a0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800053a:	f7ff fe53 	bl	80001e4 <main>

0800053e <LoopForever>:

LoopForever:
    b LoopForever
 800053e:	e7fe      	b.n	800053e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000540:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8000544:	08002158 	.word	0x08002158
	ldr	r0, =_sdata
 8000548:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800054c:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8000550:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8000554:	2000006c 	.word	0x2000006c

08000558 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000558:	e7fe      	b.n	8000558 <ADC1_2_IRQHandler>

0800055a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800055a:	b580      	push	{r7, lr}
 800055c:	b082      	sub	sp, #8
 800055e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000560:	2300      	movs	r3, #0
 8000562:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000564:	2003      	movs	r0, #3
 8000566:	f000 f939 	bl	80007dc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800056a:	2000      	movs	r0, #0
 800056c:	f000 f80e 	bl	800058c <HAL_InitTick>
 8000570:	4603      	mov	r3, r0
 8000572:	2b00      	cmp	r3, #0
 8000574:	d002      	beq.n	800057c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000576:	2301      	movs	r3, #1
 8000578:	71fb      	strb	r3, [r7, #7]
 800057a:	e001      	b.n	8000580 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800057c:	f7ff ff0e 	bl	800039c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000580:	79fb      	ldrb	r3, [r7, #7]
}
 8000582:	4618      	mov	r0, r3
 8000584:	3708      	adds	r7, #8
 8000586:	46bd      	mov	sp, r7
 8000588:	bd80      	pop	{r7, pc}
	...

0800058c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b084      	sub	sp, #16
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000594:	2300      	movs	r3, #0
 8000596:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000598:	4b16      	ldr	r3, [pc, #88]	; (80005f4 <HAL_InitTick+0x68>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	2b00      	cmp	r3, #0
 800059e:	d022      	beq.n	80005e6 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80005a0:	4b15      	ldr	r3, [pc, #84]	; (80005f8 <HAL_InitTick+0x6c>)
 80005a2:	681a      	ldr	r2, [r3, #0]
 80005a4:	4b13      	ldr	r3, [pc, #76]	; (80005f4 <HAL_InitTick+0x68>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80005ac:	fbb1 f3f3 	udiv	r3, r1, r3
 80005b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80005b4:	4618      	mov	r0, r3
 80005b6:	f000 f946 	bl	8000846 <HAL_SYSTICK_Config>
 80005ba:	4603      	mov	r3, r0
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d10f      	bne.n	80005e0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	2b0f      	cmp	r3, #15
 80005c4:	d809      	bhi.n	80005da <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005c6:	2200      	movs	r2, #0
 80005c8:	6879      	ldr	r1, [r7, #4]
 80005ca:	f04f 30ff 	mov.w	r0, #4294967295
 80005ce:	f000 f910 	bl	80007f2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80005d2:	4a0a      	ldr	r2, [pc, #40]	; (80005fc <HAL_InitTick+0x70>)
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	6013      	str	r3, [r2, #0]
 80005d8:	e007      	b.n	80005ea <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80005da:	2301      	movs	r3, #1
 80005dc:	73fb      	strb	r3, [r7, #15]
 80005de:	e004      	b.n	80005ea <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80005e0:	2301      	movs	r3, #1
 80005e2:	73fb      	strb	r3, [r7, #15]
 80005e4:	e001      	b.n	80005ea <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80005e6:	2301      	movs	r3, #1
 80005e8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80005ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80005ec:	4618      	mov	r0, r3
 80005ee:	3710      	adds	r7, #16
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	20000008 	.word	0x20000008
 80005f8:	20000000 	.word	0x20000000
 80005fc:	20000004 	.word	0x20000004

08000600 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000600:	b480      	push	{r7}
 8000602:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000604:	4b05      	ldr	r3, [pc, #20]	; (800061c <HAL_IncTick+0x1c>)
 8000606:	681a      	ldr	r2, [r3, #0]
 8000608:	4b05      	ldr	r3, [pc, #20]	; (8000620 <HAL_IncTick+0x20>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	4413      	add	r3, r2
 800060e:	4a03      	ldr	r2, [pc, #12]	; (800061c <HAL_IncTick+0x1c>)
 8000610:	6013      	str	r3, [r2, #0]
}
 8000612:	bf00      	nop
 8000614:	46bd      	mov	sp, r7
 8000616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061a:	4770      	bx	lr
 800061c:	20000068 	.word	0x20000068
 8000620:	20000008 	.word	0x20000008

08000624 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000624:	b480      	push	{r7}
 8000626:	af00      	add	r7, sp, #0
  return uwTick;
 8000628:	4b03      	ldr	r3, [pc, #12]	; (8000638 <HAL_GetTick+0x14>)
 800062a:	681b      	ldr	r3, [r3, #0]
}
 800062c:	4618      	mov	r0, r3
 800062e:	46bd      	mov	sp, r7
 8000630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000634:	4770      	bx	lr
 8000636:	bf00      	nop
 8000638:	20000068 	.word	0x20000068

0800063c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800063c:	b480      	push	{r7}
 800063e:	b085      	sub	sp, #20
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	f003 0307 	and.w	r3, r3, #7
 800064a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800064c:	4b0c      	ldr	r3, [pc, #48]	; (8000680 <__NVIC_SetPriorityGrouping+0x44>)
 800064e:	68db      	ldr	r3, [r3, #12]
 8000650:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000652:	68ba      	ldr	r2, [r7, #8]
 8000654:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000658:	4013      	ands	r3, r2
 800065a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800065c:	68fb      	ldr	r3, [r7, #12]
 800065e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000660:	68bb      	ldr	r3, [r7, #8]
 8000662:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000664:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000668:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800066c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800066e:	4a04      	ldr	r2, [pc, #16]	; (8000680 <__NVIC_SetPriorityGrouping+0x44>)
 8000670:	68bb      	ldr	r3, [r7, #8]
 8000672:	60d3      	str	r3, [r2, #12]
}
 8000674:	bf00      	nop
 8000676:	3714      	adds	r7, #20
 8000678:	46bd      	mov	sp, r7
 800067a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067e:	4770      	bx	lr
 8000680:	e000ed00 	.word	0xe000ed00

08000684 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000684:	b480      	push	{r7}
 8000686:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000688:	4b04      	ldr	r3, [pc, #16]	; (800069c <__NVIC_GetPriorityGrouping+0x18>)
 800068a:	68db      	ldr	r3, [r3, #12]
 800068c:	0a1b      	lsrs	r3, r3, #8
 800068e:	f003 0307 	and.w	r3, r3, #7
}
 8000692:	4618      	mov	r0, r3
 8000694:	46bd      	mov	sp, r7
 8000696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069a:	4770      	bx	lr
 800069c:	e000ed00 	.word	0xe000ed00

080006a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006a0:	b480      	push	{r7}
 80006a2:	b083      	sub	sp, #12
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	4603      	mov	r3, r0
 80006a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	db0b      	blt.n	80006ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006b2:	79fb      	ldrb	r3, [r7, #7]
 80006b4:	f003 021f 	and.w	r2, r3, #31
 80006b8:	4907      	ldr	r1, [pc, #28]	; (80006d8 <__NVIC_EnableIRQ+0x38>)
 80006ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006be:	095b      	lsrs	r3, r3, #5
 80006c0:	2001      	movs	r0, #1
 80006c2:	fa00 f202 	lsl.w	r2, r0, r2
 80006c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80006ca:	bf00      	nop
 80006cc:	370c      	adds	r7, #12
 80006ce:	46bd      	mov	sp, r7
 80006d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d4:	4770      	bx	lr
 80006d6:	bf00      	nop
 80006d8:	e000e100 	.word	0xe000e100

080006dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006dc:	b480      	push	{r7}
 80006de:	b083      	sub	sp, #12
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	4603      	mov	r3, r0
 80006e4:	6039      	str	r1, [r7, #0]
 80006e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	db0a      	blt.n	8000706 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006f0:	683b      	ldr	r3, [r7, #0]
 80006f2:	b2da      	uxtb	r2, r3
 80006f4:	490c      	ldr	r1, [pc, #48]	; (8000728 <__NVIC_SetPriority+0x4c>)
 80006f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006fa:	0112      	lsls	r2, r2, #4
 80006fc:	b2d2      	uxtb	r2, r2
 80006fe:	440b      	add	r3, r1
 8000700:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000704:	e00a      	b.n	800071c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000706:	683b      	ldr	r3, [r7, #0]
 8000708:	b2da      	uxtb	r2, r3
 800070a:	4908      	ldr	r1, [pc, #32]	; (800072c <__NVIC_SetPriority+0x50>)
 800070c:	79fb      	ldrb	r3, [r7, #7]
 800070e:	f003 030f 	and.w	r3, r3, #15
 8000712:	3b04      	subs	r3, #4
 8000714:	0112      	lsls	r2, r2, #4
 8000716:	b2d2      	uxtb	r2, r2
 8000718:	440b      	add	r3, r1
 800071a:	761a      	strb	r2, [r3, #24]
}
 800071c:	bf00      	nop
 800071e:	370c      	adds	r7, #12
 8000720:	46bd      	mov	sp, r7
 8000722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000726:	4770      	bx	lr
 8000728:	e000e100 	.word	0xe000e100
 800072c:	e000ed00 	.word	0xe000ed00

08000730 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000730:	b480      	push	{r7}
 8000732:	b089      	sub	sp, #36	; 0x24
 8000734:	af00      	add	r7, sp, #0
 8000736:	60f8      	str	r0, [r7, #12]
 8000738:	60b9      	str	r1, [r7, #8]
 800073a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800073c:	68fb      	ldr	r3, [r7, #12]
 800073e:	f003 0307 	and.w	r3, r3, #7
 8000742:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000744:	69fb      	ldr	r3, [r7, #28]
 8000746:	f1c3 0307 	rsb	r3, r3, #7
 800074a:	2b04      	cmp	r3, #4
 800074c:	bf28      	it	cs
 800074e:	2304      	movcs	r3, #4
 8000750:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000752:	69fb      	ldr	r3, [r7, #28]
 8000754:	3304      	adds	r3, #4
 8000756:	2b06      	cmp	r3, #6
 8000758:	d902      	bls.n	8000760 <NVIC_EncodePriority+0x30>
 800075a:	69fb      	ldr	r3, [r7, #28]
 800075c:	3b03      	subs	r3, #3
 800075e:	e000      	b.n	8000762 <NVIC_EncodePriority+0x32>
 8000760:	2300      	movs	r3, #0
 8000762:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000764:	f04f 32ff 	mov.w	r2, #4294967295
 8000768:	69bb      	ldr	r3, [r7, #24]
 800076a:	fa02 f303 	lsl.w	r3, r2, r3
 800076e:	43da      	mvns	r2, r3
 8000770:	68bb      	ldr	r3, [r7, #8]
 8000772:	401a      	ands	r2, r3
 8000774:	697b      	ldr	r3, [r7, #20]
 8000776:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000778:	f04f 31ff 	mov.w	r1, #4294967295
 800077c:	697b      	ldr	r3, [r7, #20]
 800077e:	fa01 f303 	lsl.w	r3, r1, r3
 8000782:	43d9      	mvns	r1, r3
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000788:	4313      	orrs	r3, r2
         );
}
 800078a:	4618      	mov	r0, r3
 800078c:	3724      	adds	r7, #36	; 0x24
 800078e:	46bd      	mov	sp, r7
 8000790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000794:	4770      	bx	lr
	...

08000798 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	3b01      	subs	r3, #1
 80007a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80007a8:	d301      	bcc.n	80007ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80007aa:	2301      	movs	r3, #1
 80007ac:	e00f      	b.n	80007ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007ae:	4a0a      	ldr	r2, [pc, #40]	; (80007d8 <SysTick_Config+0x40>)
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	3b01      	subs	r3, #1
 80007b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80007b6:	210f      	movs	r1, #15
 80007b8:	f04f 30ff 	mov.w	r0, #4294967295
 80007bc:	f7ff ff8e 	bl	80006dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007c0:	4b05      	ldr	r3, [pc, #20]	; (80007d8 <SysTick_Config+0x40>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007c6:	4b04      	ldr	r3, [pc, #16]	; (80007d8 <SysTick_Config+0x40>)
 80007c8:	2207      	movs	r2, #7
 80007ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007cc:	2300      	movs	r3, #0
}
 80007ce:	4618      	mov	r0, r3
 80007d0:	3708      	adds	r7, #8
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	e000e010 	.word	0xe000e010

080007dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b082      	sub	sp, #8
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007e4:	6878      	ldr	r0, [r7, #4]
 80007e6:	f7ff ff29 	bl	800063c <__NVIC_SetPriorityGrouping>
}
 80007ea:	bf00      	nop
 80007ec:	3708      	adds	r7, #8
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}

080007f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007f2:	b580      	push	{r7, lr}
 80007f4:	b086      	sub	sp, #24
 80007f6:	af00      	add	r7, sp, #0
 80007f8:	4603      	mov	r3, r0
 80007fa:	60b9      	str	r1, [r7, #8]
 80007fc:	607a      	str	r2, [r7, #4]
 80007fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000800:	2300      	movs	r3, #0
 8000802:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000804:	f7ff ff3e 	bl	8000684 <__NVIC_GetPriorityGrouping>
 8000808:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800080a:	687a      	ldr	r2, [r7, #4]
 800080c:	68b9      	ldr	r1, [r7, #8]
 800080e:	6978      	ldr	r0, [r7, #20]
 8000810:	f7ff ff8e 	bl	8000730 <NVIC_EncodePriority>
 8000814:	4602      	mov	r2, r0
 8000816:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800081a:	4611      	mov	r1, r2
 800081c:	4618      	mov	r0, r3
 800081e:	f7ff ff5d 	bl	80006dc <__NVIC_SetPriority>
}
 8000822:	bf00      	nop
 8000824:	3718      	adds	r7, #24
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}

0800082a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800082a:	b580      	push	{r7, lr}
 800082c:	b082      	sub	sp, #8
 800082e:	af00      	add	r7, sp, #0
 8000830:	4603      	mov	r3, r0
 8000832:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000834:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000838:	4618      	mov	r0, r3
 800083a:	f7ff ff31 	bl	80006a0 <__NVIC_EnableIRQ>
}
 800083e:	bf00      	nop
 8000840:	3708      	adds	r7, #8
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}

08000846 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000846:	b580      	push	{r7, lr}
 8000848:	b082      	sub	sp, #8
 800084a:	af00      	add	r7, sp, #0
 800084c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800084e:	6878      	ldr	r0, [r7, #4]
 8000850:	f7ff ffa2 	bl	8000798 <SysTick_Config>
 8000854:	4603      	mov	r3, r0
}
 8000856:	4618      	mov	r0, r3
 8000858:	3708      	adds	r7, #8
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
	...

08000860 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000860:	b480      	push	{r7}
 8000862:	b087      	sub	sp, #28
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
 8000868:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800086a:	2300      	movs	r3, #0
 800086c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800086e:	e17f      	b.n	8000b70 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000870:	683b      	ldr	r3, [r7, #0]
 8000872:	681a      	ldr	r2, [r3, #0]
 8000874:	2101      	movs	r1, #1
 8000876:	697b      	ldr	r3, [r7, #20]
 8000878:	fa01 f303 	lsl.w	r3, r1, r3
 800087c:	4013      	ands	r3, r2
 800087e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000880:	68fb      	ldr	r3, [r7, #12]
 8000882:	2b00      	cmp	r3, #0
 8000884:	f000 8171 	beq.w	8000b6a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000888:	683b      	ldr	r3, [r7, #0]
 800088a:	685b      	ldr	r3, [r3, #4]
 800088c:	2b01      	cmp	r3, #1
 800088e:	d00b      	beq.n	80008a8 <HAL_GPIO_Init+0x48>
 8000890:	683b      	ldr	r3, [r7, #0]
 8000892:	685b      	ldr	r3, [r3, #4]
 8000894:	2b02      	cmp	r3, #2
 8000896:	d007      	beq.n	80008a8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000898:	683b      	ldr	r3, [r7, #0]
 800089a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800089c:	2b11      	cmp	r3, #17
 800089e:	d003      	beq.n	80008a8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008a0:	683b      	ldr	r3, [r7, #0]
 80008a2:	685b      	ldr	r3, [r3, #4]
 80008a4:	2b12      	cmp	r3, #18
 80008a6:	d130      	bne.n	800090a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	689b      	ldr	r3, [r3, #8]
 80008ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80008ae:	697b      	ldr	r3, [r7, #20]
 80008b0:	005b      	lsls	r3, r3, #1
 80008b2:	2203      	movs	r2, #3
 80008b4:	fa02 f303 	lsl.w	r3, r2, r3
 80008b8:	43db      	mvns	r3, r3
 80008ba:	693a      	ldr	r2, [r7, #16]
 80008bc:	4013      	ands	r3, r2
 80008be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80008c0:	683b      	ldr	r3, [r7, #0]
 80008c2:	68da      	ldr	r2, [r3, #12]
 80008c4:	697b      	ldr	r3, [r7, #20]
 80008c6:	005b      	lsls	r3, r3, #1
 80008c8:	fa02 f303 	lsl.w	r3, r2, r3
 80008cc:	693a      	ldr	r2, [r7, #16]
 80008ce:	4313      	orrs	r3, r2
 80008d0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	693a      	ldr	r2, [r7, #16]
 80008d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	685b      	ldr	r3, [r3, #4]
 80008dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80008de:	2201      	movs	r2, #1
 80008e0:	697b      	ldr	r3, [r7, #20]
 80008e2:	fa02 f303 	lsl.w	r3, r2, r3
 80008e6:	43db      	mvns	r3, r3
 80008e8:	693a      	ldr	r2, [r7, #16]
 80008ea:	4013      	ands	r3, r2
 80008ec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80008ee:	683b      	ldr	r3, [r7, #0]
 80008f0:	685b      	ldr	r3, [r3, #4]
 80008f2:	091b      	lsrs	r3, r3, #4
 80008f4:	f003 0201 	and.w	r2, r3, #1
 80008f8:	697b      	ldr	r3, [r7, #20]
 80008fa:	fa02 f303 	lsl.w	r3, r2, r3
 80008fe:	693a      	ldr	r2, [r7, #16]
 8000900:	4313      	orrs	r3, r2
 8000902:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	693a      	ldr	r2, [r7, #16]
 8000908:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800090a:	683b      	ldr	r3, [r7, #0]
 800090c:	685b      	ldr	r3, [r3, #4]
 800090e:	f003 0303 	and.w	r3, r3, #3
 8000912:	2b03      	cmp	r3, #3
 8000914:	d118      	bne.n	8000948 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800091a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800091c:	2201      	movs	r2, #1
 800091e:	697b      	ldr	r3, [r7, #20]
 8000920:	fa02 f303 	lsl.w	r3, r2, r3
 8000924:	43db      	mvns	r3, r3
 8000926:	693a      	ldr	r2, [r7, #16]
 8000928:	4013      	ands	r3, r2
 800092a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 800092c:	683b      	ldr	r3, [r7, #0]
 800092e:	685b      	ldr	r3, [r3, #4]
 8000930:	08db      	lsrs	r3, r3, #3
 8000932:	f003 0201 	and.w	r2, r3, #1
 8000936:	697b      	ldr	r3, [r7, #20]
 8000938:	fa02 f303 	lsl.w	r3, r2, r3
 800093c:	693a      	ldr	r2, [r7, #16]
 800093e:	4313      	orrs	r3, r2
 8000940:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	693a      	ldr	r2, [r7, #16]
 8000946:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	68db      	ldr	r3, [r3, #12]
 800094c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800094e:	697b      	ldr	r3, [r7, #20]
 8000950:	005b      	lsls	r3, r3, #1
 8000952:	2203      	movs	r2, #3
 8000954:	fa02 f303 	lsl.w	r3, r2, r3
 8000958:	43db      	mvns	r3, r3
 800095a:	693a      	ldr	r2, [r7, #16]
 800095c:	4013      	ands	r3, r2
 800095e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000960:	683b      	ldr	r3, [r7, #0]
 8000962:	689a      	ldr	r2, [r3, #8]
 8000964:	697b      	ldr	r3, [r7, #20]
 8000966:	005b      	lsls	r3, r3, #1
 8000968:	fa02 f303 	lsl.w	r3, r2, r3
 800096c:	693a      	ldr	r2, [r7, #16]
 800096e:	4313      	orrs	r3, r2
 8000970:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	693a      	ldr	r2, [r7, #16]
 8000976:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000978:	683b      	ldr	r3, [r7, #0]
 800097a:	685b      	ldr	r3, [r3, #4]
 800097c:	2b02      	cmp	r3, #2
 800097e:	d003      	beq.n	8000988 <HAL_GPIO_Init+0x128>
 8000980:	683b      	ldr	r3, [r7, #0]
 8000982:	685b      	ldr	r3, [r3, #4]
 8000984:	2b12      	cmp	r3, #18
 8000986:	d123      	bne.n	80009d0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000988:	697b      	ldr	r3, [r7, #20]
 800098a:	08da      	lsrs	r2, r3, #3
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	3208      	adds	r2, #8
 8000990:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000994:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000996:	697b      	ldr	r3, [r7, #20]
 8000998:	f003 0307 	and.w	r3, r3, #7
 800099c:	009b      	lsls	r3, r3, #2
 800099e:	220f      	movs	r2, #15
 80009a0:	fa02 f303 	lsl.w	r3, r2, r3
 80009a4:	43db      	mvns	r3, r3
 80009a6:	693a      	ldr	r2, [r7, #16]
 80009a8:	4013      	ands	r3, r2
 80009aa:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80009ac:	683b      	ldr	r3, [r7, #0]
 80009ae:	691a      	ldr	r2, [r3, #16]
 80009b0:	697b      	ldr	r3, [r7, #20]
 80009b2:	f003 0307 	and.w	r3, r3, #7
 80009b6:	009b      	lsls	r3, r3, #2
 80009b8:	fa02 f303 	lsl.w	r3, r2, r3
 80009bc:	693a      	ldr	r2, [r7, #16]
 80009be:	4313      	orrs	r3, r2
 80009c0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80009c2:	697b      	ldr	r3, [r7, #20]
 80009c4:	08da      	lsrs	r2, r3, #3
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	3208      	adds	r2, #8
 80009ca:	6939      	ldr	r1, [r7, #16]
 80009cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80009d6:	697b      	ldr	r3, [r7, #20]
 80009d8:	005b      	lsls	r3, r3, #1
 80009da:	2203      	movs	r2, #3
 80009dc:	fa02 f303 	lsl.w	r3, r2, r3
 80009e0:	43db      	mvns	r3, r3
 80009e2:	693a      	ldr	r2, [r7, #16]
 80009e4:	4013      	ands	r3, r2
 80009e6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80009e8:	683b      	ldr	r3, [r7, #0]
 80009ea:	685b      	ldr	r3, [r3, #4]
 80009ec:	f003 0203 	and.w	r2, r3, #3
 80009f0:	697b      	ldr	r3, [r7, #20]
 80009f2:	005b      	lsls	r3, r3, #1
 80009f4:	fa02 f303 	lsl.w	r3, r2, r3
 80009f8:	693a      	ldr	r2, [r7, #16]
 80009fa:	4313      	orrs	r3, r2
 80009fc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	693a      	ldr	r2, [r7, #16]
 8000a02:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a04:	683b      	ldr	r3, [r7, #0]
 8000a06:	685b      	ldr	r3, [r3, #4]
 8000a08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	f000 80ac 	beq.w	8000b6a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a12:	4b5e      	ldr	r3, [pc, #376]	; (8000b8c <HAL_GPIO_Init+0x32c>)
 8000a14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a16:	4a5d      	ldr	r2, [pc, #372]	; (8000b8c <HAL_GPIO_Init+0x32c>)
 8000a18:	f043 0301 	orr.w	r3, r3, #1
 8000a1c:	6613      	str	r3, [r2, #96]	; 0x60
 8000a1e:	4b5b      	ldr	r3, [pc, #364]	; (8000b8c <HAL_GPIO_Init+0x32c>)
 8000a20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a22:	f003 0301 	and.w	r3, r3, #1
 8000a26:	60bb      	str	r3, [r7, #8]
 8000a28:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000a2a:	4a59      	ldr	r2, [pc, #356]	; (8000b90 <HAL_GPIO_Init+0x330>)
 8000a2c:	697b      	ldr	r3, [r7, #20]
 8000a2e:	089b      	lsrs	r3, r3, #2
 8000a30:	3302      	adds	r3, #2
 8000a32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a36:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000a38:	697b      	ldr	r3, [r7, #20]
 8000a3a:	f003 0303 	and.w	r3, r3, #3
 8000a3e:	009b      	lsls	r3, r3, #2
 8000a40:	220f      	movs	r2, #15
 8000a42:	fa02 f303 	lsl.w	r3, r2, r3
 8000a46:	43db      	mvns	r3, r3
 8000a48:	693a      	ldr	r2, [r7, #16]
 8000a4a:	4013      	ands	r3, r2
 8000a4c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000a54:	d025      	beq.n	8000aa2 <HAL_GPIO_Init+0x242>
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	4a4e      	ldr	r2, [pc, #312]	; (8000b94 <HAL_GPIO_Init+0x334>)
 8000a5a:	4293      	cmp	r3, r2
 8000a5c:	d01f      	beq.n	8000a9e <HAL_GPIO_Init+0x23e>
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	4a4d      	ldr	r2, [pc, #308]	; (8000b98 <HAL_GPIO_Init+0x338>)
 8000a62:	4293      	cmp	r3, r2
 8000a64:	d019      	beq.n	8000a9a <HAL_GPIO_Init+0x23a>
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	4a4c      	ldr	r2, [pc, #304]	; (8000b9c <HAL_GPIO_Init+0x33c>)
 8000a6a:	4293      	cmp	r3, r2
 8000a6c:	d013      	beq.n	8000a96 <HAL_GPIO_Init+0x236>
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	4a4b      	ldr	r2, [pc, #300]	; (8000ba0 <HAL_GPIO_Init+0x340>)
 8000a72:	4293      	cmp	r3, r2
 8000a74:	d00d      	beq.n	8000a92 <HAL_GPIO_Init+0x232>
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	4a4a      	ldr	r2, [pc, #296]	; (8000ba4 <HAL_GPIO_Init+0x344>)
 8000a7a:	4293      	cmp	r3, r2
 8000a7c:	d007      	beq.n	8000a8e <HAL_GPIO_Init+0x22e>
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	4a49      	ldr	r2, [pc, #292]	; (8000ba8 <HAL_GPIO_Init+0x348>)
 8000a82:	4293      	cmp	r3, r2
 8000a84:	d101      	bne.n	8000a8a <HAL_GPIO_Init+0x22a>
 8000a86:	2306      	movs	r3, #6
 8000a88:	e00c      	b.n	8000aa4 <HAL_GPIO_Init+0x244>
 8000a8a:	2307      	movs	r3, #7
 8000a8c:	e00a      	b.n	8000aa4 <HAL_GPIO_Init+0x244>
 8000a8e:	2305      	movs	r3, #5
 8000a90:	e008      	b.n	8000aa4 <HAL_GPIO_Init+0x244>
 8000a92:	2304      	movs	r3, #4
 8000a94:	e006      	b.n	8000aa4 <HAL_GPIO_Init+0x244>
 8000a96:	2303      	movs	r3, #3
 8000a98:	e004      	b.n	8000aa4 <HAL_GPIO_Init+0x244>
 8000a9a:	2302      	movs	r3, #2
 8000a9c:	e002      	b.n	8000aa4 <HAL_GPIO_Init+0x244>
 8000a9e:	2301      	movs	r3, #1
 8000aa0:	e000      	b.n	8000aa4 <HAL_GPIO_Init+0x244>
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	697a      	ldr	r2, [r7, #20]
 8000aa6:	f002 0203 	and.w	r2, r2, #3
 8000aaa:	0092      	lsls	r2, r2, #2
 8000aac:	4093      	lsls	r3, r2
 8000aae:	693a      	ldr	r2, [r7, #16]
 8000ab0:	4313      	orrs	r3, r2
 8000ab2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000ab4:	4936      	ldr	r1, [pc, #216]	; (8000b90 <HAL_GPIO_Init+0x330>)
 8000ab6:	697b      	ldr	r3, [r7, #20]
 8000ab8:	089b      	lsrs	r3, r3, #2
 8000aba:	3302      	adds	r3, #2
 8000abc:	693a      	ldr	r2, [r7, #16]
 8000abe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000ac2:	4b3a      	ldr	r3, [pc, #232]	; (8000bac <HAL_GPIO_Init+0x34c>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	43db      	mvns	r3, r3
 8000acc:	693a      	ldr	r2, [r7, #16]
 8000ace:	4013      	ands	r3, r2
 8000ad0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ad2:	683b      	ldr	r3, [r7, #0]
 8000ad4:	685b      	ldr	r3, [r3, #4]
 8000ad6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d003      	beq.n	8000ae6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000ade:	693a      	ldr	r2, [r7, #16]
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	4313      	orrs	r3, r2
 8000ae4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000ae6:	4a31      	ldr	r2, [pc, #196]	; (8000bac <HAL_GPIO_Init+0x34c>)
 8000ae8:	693b      	ldr	r3, [r7, #16]
 8000aea:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8000aec:	4b2f      	ldr	r3, [pc, #188]	; (8000bac <HAL_GPIO_Init+0x34c>)
 8000aee:	685b      	ldr	r3, [r3, #4]
 8000af0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000af2:	68fb      	ldr	r3, [r7, #12]
 8000af4:	43db      	mvns	r3, r3
 8000af6:	693a      	ldr	r2, [r7, #16]
 8000af8:	4013      	ands	r3, r2
 8000afa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000afc:	683b      	ldr	r3, [r7, #0]
 8000afe:	685b      	ldr	r3, [r3, #4]
 8000b00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d003      	beq.n	8000b10 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000b08:	693a      	ldr	r2, [r7, #16]
 8000b0a:	68fb      	ldr	r3, [r7, #12]
 8000b0c:	4313      	orrs	r3, r2
 8000b0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000b10:	4a26      	ldr	r2, [pc, #152]	; (8000bac <HAL_GPIO_Init+0x34c>)
 8000b12:	693b      	ldr	r3, [r7, #16]
 8000b14:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000b16:	4b25      	ldr	r3, [pc, #148]	; (8000bac <HAL_GPIO_Init+0x34c>)
 8000b18:	689b      	ldr	r3, [r3, #8]
 8000b1a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	43db      	mvns	r3, r3
 8000b20:	693a      	ldr	r2, [r7, #16]
 8000b22:	4013      	ands	r3, r2
 8000b24:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b26:	683b      	ldr	r3, [r7, #0]
 8000b28:	685b      	ldr	r3, [r3, #4]
 8000b2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d003      	beq.n	8000b3a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000b32:	693a      	ldr	r2, [r7, #16]
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	4313      	orrs	r3, r2
 8000b38:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000b3a:	4a1c      	ldr	r2, [pc, #112]	; (8000bac <HAL_GPIO_Init+0x34c>)
 8000b3c:	693b      	ldr	r3, [r7, #16]
 8000b3e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000b40:	4b1a      	ldr	r3, [pc, #104]	; (8000bac <HAL_GPIO_Init+0x34c>)
 8000b42:	68db      	ldr	r3, [r3, #12]
 8000b44:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b46:	68fb      	ldr	r3, [r7, #12]
 8000b48:	43db      	mvns	r3, r3
 8000b4a:	693a      	ldr	r2, [r7, #16]
 8000b4c:	4013      	ands	r3, r2
 8000b4e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b50:	683b      	ldr	r3, [r7, #0]
 8000b52:	685b      	ldr	r3, [r3, #4]
 8000b54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d003      	beq.n	8000b64 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000b5c:	693a      	ldr	r2, [r7, #16]
 8000b5e:	68fb      	ldr	r3, [r7, #12]
 8000b60:	4313      	orrs	r3, r2
 8000b62:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000b64:	4a11      	ldr	r2, [pc, #68]	; (8000bac <HAL_GPIO_Init+0x34c>)
 8000b66:	693b      	ldr	r3, [r7, #16]
 8000b68:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000b6a:	697b      	ldr	r3, [r7, #20]
 8000b6c:	3301      	adds	r3, #1
 8000b6e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b70:	683b      	ldr	r3, [r7, #0]
 8000b72:	681a      	ldr	r2, [r3, #0]
 8000b74:	697b      	ldr	r3, [r7, #20]
 8000b76:	fa22 f303 	lsr.w	r3, r2, r3
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	f47f ae78 	bne.w	8000870 <HAL_GPIO_Init+0x10>
  }
}
 8000b80:	bf00      	nop
 8000b82:	371c      	adds	r7, #28
 8000b84:	46bd      	mov	sp, r7
 8000b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8a:	4770      	bx	lr
 8000b8c:	40021000 	.word	0x40021000
 8000b90:	40010000 	.word	0x40010000
 8000b94:	48000400 	.word	0x48000400
 8000b98:	48000800 	.word	0x48000800
 8000b9c:	48000c00 	.word	0x48000c00
 8000ba0:	48001000 	.word	0x48001000
 8000ba4:	48001400 	.word	0x48001400
 8000ba8:	48001800 	.word	0x48001800
 8000bac:	40010400 	.word	0x40010400

08000bb0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	b083      	sub	sp, #12
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
 8000bb8:	460b      	mov	r3, r1
 8000bba:	807b      	strh	r3, [r7, #2]
 8000bbc:	4613      	mov	r3, r2
 8000bbe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000bc0:	787b      	ldrb	r3, [r7, #1]
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d003      	beq.n	8000bce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000bc6:	887a      	ldrh	r2, [r7, #2]
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000bcc:	e002      	b.n	8000bd4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000bce:	887a      	ldrh	r2, [r7, #2]
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000bd4:	bf00      	nop
 8000bd6:	370c      	adds	r7, #12
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bde:	4770      	bx	lr

08000be0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b083      	sub	sp, #12
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
 8000be8:	460b      	mov	r3, r1
 8000bea:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	695a      	ldr	r2, [r3, #20]
 8000bf0:	887b      	ldrh	r3, [r7, #2]
 8000bf2:	4013      	ands	r3, r2
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d003      	beq.n	8000c00 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000bf8:	887a      	ldrh	r2, [r7, #2]
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	629a      	str	r2, [r3, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8000bfe:	e002      	b.n	8000c06 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000c00:	887a      	ldrh	r2, [r7, #2]
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	619a      	str	r2, [r3, #24]
}
 8000c06:	bf00      	nop
 8000c08:	370c      	adds	r7, #12
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c10:	4770      	bx	lr
	...

08000c14 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000c18:	4b04      	ldr	r3, [pc, #16]	; (8000c2c <HAL_PWREx_GetVoltageRange+0x18>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000c20:	4618      	mov	r0, r3
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop
 8000c2c:	40007000 	.word	0x40007000

08000c30 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000c30:	b480      	push	{r7}
 8000c32:	b085      	sub	sp, #20
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000c3e:	d130      	bne.n	8000ca2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000c40:	4b23      	ldr	r3, [pc, #140]	; (8000cd0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000c48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000c4c:	d038      	beq.n	8000cc0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c4e:	4b20      	ldr	r3, [pc, #128]	; (8000cd0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000c56:	4a1e      	ldr	r2, [pc, #120]	; (8000cd0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c58:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c5c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000c5e:	4b1d      	ldr	r3, [pc, #116]	; (8000cd4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	2232      	movs	r2, #50	; 0x32
 8000c64:	fb02 f303 	mul.w	r3, r2, r3
 8000c68:	4a1b      	ldr	r2, [pc, #108]	; (8000cd8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000c6a:	fba2 2303 	umull	r2, r3, r2, r3
 8000c6e:	0c9b      	lsrs	r3, r3, #18
 8000c70:	3301      	adds	r3, #1
 8000c72:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000c74:	e002      	b.n	8000c7c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000c76:	68fb      	ldr	r3, [r7, #12]
 8000c78:	3b01      	subs	r3, #1
 8000c7a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000c7c:	4b14      	ldr	r3, [pc, #80]	; (8000cd0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c7e:	695b      	ldr	r3, [r3, #20]
 8000c80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000c88:	d102      	bne.n	8000c90 <HAL_PWREx_ControlVoltageScaling+0x60>
 8000c8a:	68fb      	ldr	r3, [r7, #12]
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d1f2      	bne.n	8000c76 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000c90:	4b0f      	ldr	r3, [pc, #60]	; (8000cd0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c92:	695b      	ldr	r3, [r3, #20]
 8000c94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000c9c:	d110      	bne.n	8000cc0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000c9e:	2303      	movs	r3, #3
 8000ca0:	e00f      	b.n	8000cc2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000ca2:	4b0b      	ldr	r3, [pc, #44]	; (8000cd0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000caa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000cae:	d007      	beq.n	8000cc0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000cb0:	4b07      	ldr	r3, [pc, #28]	; (8000cd0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000cb8:	4a05      	ldr	r2, [pc, #20]	; (8000cd0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000cba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cbe:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000cc0:	2300      	movs	r3, #0
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	3714      	adds	r7, #20
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop
 8000cd0:	40007000 	.word	0x40007000
 8000cd4:	20000000 	.word	0x20000000
 8000cd8:	431bde83 	.word	0x431bde83

08000cdc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b088      	sub	sp, #32
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d101      	bne.n	8000cee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000cea:	2301      	movs	r3, #1
 8000cec:	e3d4      	b.n	8001498 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000cee:	4ba1      	ldr	r3, [pc, #644]	; (8000f74 <HAL_RCC_OscConfig+0x298>)
 8000cf0:	689b      	ldr	r3, [r3, #8]
 8000cf2:	f003 030c 	and.w	r3, r3, #12
 8000cf6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000cf8:	4b9e      	ldr	r3, [pc, #632]	; (8000f74 <HAL_RCC_OscConfig+0x298>)
 8000cfa:	68db      	ldr	r3, [r3, #12]
 8000cfc:	f003 0303 	and.w	r3, r3, #3
 8000d00:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	f003 0310 	and.w	r3, r3, #16
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	f000 80e4 	beq.w	8000ed8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000d10:	69bb      	ldr	r3, [r7, #24]
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d007      	beq.n	8000d26 <HAL_RCC_OscConfig+0x4a>
 8000d16:	69bb      	ldr	r3, [r7, #24]
 8000d18:	2b0c      	cmp	r3, #12
 8000d1a:	f040 808b 	bne.w	8000e34 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000d1e:	697b      	ldr	r3, [r7, #20]
 8000d20:	2b01      	cmp	r3, #1
 8000d22:	f040 8087 	bne.w	8000e34 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000d26:	4b93      	ldr	r3, [pc, #588]	; (8000f74 <HAL_RCC_OscConfig+0x298>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	f003 0302 	and.w	r3, r3, #2
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d005      	beq.n	8000d3e <HAL_RCC_OscConfig+0x62>
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	699b      	ldr	r3, [r3, #24]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d101      	bne.n	8000d3e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	e3ac      	b.n	8001498 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	6a1a      	ldr	r2, [r3, #32]
 8000d42:	4b8c      	ldr	r3, [pc, #560]	; (8000f74 <HAL_RCC_OscConfig+0x298>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	f003 0308 	and.w	r3, r3, #8
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d004      	beq.n	8000d58 <HAL_RCC_OscConfig+0x7c>
 8000d4e:	4b89      	ldr	r3, [pc, #548]	; (8000f74 <HAL_RCC_OscConfig+0x298>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000d56:	e005      	b.n	8000d64 <HAL_RCC_OscConfig+0x88>
 8000d58:	4b86      	ldr	r3, [pc, #536]	; (8000f74 <HAL_RCC_OscConfig+0x298>)
 8000d5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000d5e:	091b      	lsrs	r3, r3, #4
 8000d60:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000d64:	4293      	cmp	r3, r2
 8000d66:	d223      	bcs.n	8000db0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	6a1b      	ldr	r3, [r3, #32]
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f000 fd07 	bl	8001780 <RCC_SetFlashLatencyFromMSIRange>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d001      	beq.n	8000d7c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8000d78:	2301      	movs	r3, #1
 8000d7a:	e38d      	b.n	8001498 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000d7c:	4b7d      	ldr	r3, [pc, #500]	; (8000f74 <HAL_RCC_OscConfig+0x298>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	4a7c      	ldr	r2, [pc, #496]	; (8000f74 <HAL_RCC_OscConfig+0x298>)
 8000d82:	f043 0308 	orr.w	r3, r3, #8
 8000d86:	6013      	str	r3, [r2, #0]
 8000d88:	4b7a      	ldr	r3, [pc, #488]	; (8000f74 <HAL_RCC_OscConfig+0x298>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	6a1b      	ldr	r3, [r3, #32]
 8000d94:	4977      	ldr	r1, [pc, #476]	; (8000f74 <HAL_RCC_OscConfig+0x298>)
 8000d96:	4313      	orrs	r3, r2
 8000d98:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000d9a:	4b76      	ldr	r3, [pc, #472]	; (8000f74 <HAL_RCC_OscConfig+0x298>)
 8000d9c:	685b      	ldr	r3, [r3, #4]
 8000d9e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	69db      	ldr	r3, [r3, #28]
 8000da6:	021b      	lsls	r3, r3, #8
 8000da8:	4972      	ldr	r1, [pc, #456]	; (8000f74 <HAL_RCC_OscConfig+0x298>)
 8000daa:	4313      	orrs	r3, r2
 8000dac:	604b      	str	r3, [r1, #4]
 8000dae:	e025      	b.n	8000dfc <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000db0:	4b70      	ldr	r3, [pc, #448]	; (8000f74 <HAL_RCC_OscConfig+0x298>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	4a6f      	ldr	r2, [pc, #444]	; (8000f74 <HAL_RCC_OscConfig+0x298>)
 8000db6:	f043 0308 	orr.w	r3, r3, #8
 8000dba:	6013      	str	r3, [r2, #0]
 8000dbc:	4b6d      	ldr	r3, [pc, #436]	; (8000f74 <HAL_RCC_OscConfig+0x298>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	6a1b      	ldr	r3, [r3, #32]
 8000dc8:	496a      	ldr	r1, [pc, #424]	; (8000f74 <HAL_RCC_OscConfig+0x298>)
 8000dca:	4313      	orrs	r3, r2
 8000dcc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000dce:	4b69      	ldr	r3, [pc, #420]	; (8000f74 <HAL_RCC_OscConfig+0x298>)
 8000dd0:	685b      	ldr	r3, [r3, #4]
 8000dd2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	69db      	ldr	r3, [r3, #28]
 8000dda:	021b      	lsls	r3, r3, #8
 8000ddc:	4965      	ldr	r1, [pc, #404]	; (8000f74 <HAL_RCC_OscConfig+0x298>)
 8000dde:	4313      	orrs	r3, r2
 8000de0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000de2:	69bb      	ldr	r3, [r7, #24]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d109      	bne.n	8000dfc <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	6a1b      	ldr	r3, [r3, #32]
 8000dec:	4618      	mov	r0, r3
 8000dee:	f000 fcc7 	bl	8001780 <RCC_SetFlashLatencyFromMSIRange>
 8000df2:	4603      	mov	r3, r0
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d001      	beq.n	8000dfc <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8000df8:	2301      	movs	r3, #1
 8000dfa:	e34d      	b.n	8001498 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000dfc:	f000 fc36 	bl	800166c <HAL_RCC_GetSysClockFreq>
 8000e00:	4601      	mov	r1, r0
 8000e02:	4b5c      	ldr	r3, [pc, #368]	; (8000f74 <HAL_RCC_OscConfig+0x298>)
 8000e04:	689b      	ldr	r3, [r3, #8]
 8000e06:	091b      	lsrs	r3, r3, #4
 8000e08:	f003 030f 	and.w	r3, r3, #15
 8000e0c:	4a5a      	ldr	r2, [pc, #360]	; (8000f78 <HAL_RCC_OscConfig+0x29c>)
 8000e0e:	5cd3      	ldrb	r3, [r2, r3]
 8000e10:	f003 031f 	and.w	r3, r3, #31
 8000e14:	fa21 f303 	lsr.w	r3, r1, r3
 8000e18:	4a58      	ldr	r2, [pc, #352]	; (8000f7c <HAL_RCC_OscConfig+0x2a0>)
 8000e1a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000e1c:	4b58      	ldr	r3, [pc, #352]	; (8000f80 <HAL_RCC_OscConfig+0x2a4>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	4618      	mov	r0, r3
 8000e22:	f7ff fbb3 	bl	800058c <HAL_InitTick>
 8000e26:	4603      	mov	r3, r0
 8000e28:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000e2a:	7bfb      	ldrb	r3, [r7, #15]
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d052      	beq.n	8000ed6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8000e30:	7bfb      	ldrb	r3, [r7, #15]
 8000e32:	e331      	b.n	8001498 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	699b      	ldr	r3, [r3, #24]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d032      	beq.n	8000ea2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000e3c:	4b4d      	ldr	r3, [pc, #308]	; (8000f74 <HAL_RCC_OscConfig+0x298>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	4a4c      	ldr	r2, [pc, #304]	; (8000f74 <HAL_RCC_OscConfig+0x298>)
 8000e42:	f043 0301 	orr.w	r3, r3, #1
 8000e46:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000e48:	f7ff fbec 	bl	8000624 <HAL_GetTick>
 8000e4c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000e4e:	e008      	b.n	8000e62 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000e50:	f7ff fbe8 	bl	8000624 <HAL_GetTick>
 8000e54:	4602      	mov	r2, r0
 8000e56:	693b      	ldr	r3, [r7, #16]
 8000e58:	1ad3      	subs	r3, r2, r3
 8000e5a:	2b02      	cmp	r3, #2
 8000e5c:	d901      	bls.n	8000e62 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8000e5e:	2303      	movs	r3, #3
 8000e60:	e31a      	b.n	8001498 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000e62:	4b44      	ldr	r3, [pc, #272]	; (8000f74 <HAL_RCC_OscConfig+0x298>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	f003 0302 	and.w	r3, r3, #2
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d0f0      	beq.n	8000e50 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000e6e:	4b41      	ldr	r3, [pc, #260]	; (8000f74 <HAL_RCC_OscConfig+0x298>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	4a40      	ldr	r2, [pc, #256]	; (8000f74 <HAL_RCC_OscConfig+0x298>)
 8000e74:	f043 0308 	orr.w	r3, r3, #8
 8000e78:	6013      	str	r3, [r2, #0]
 8000e7a:	4b3e      	ldr	r3, [pc, #248]	; (8000f74 <HAL_RCC_OscConfig+0x298>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	6a1b      	ldr	r3, [r3, #32]
 8000e86:	493b      	ldr	r1, [pc, #236]	; (8000f74 <HAL_RCC_OscConfig+0x298>)
 8000e88:	4313      	orrs	r3, r2
 8000e8a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000e8c:	4b39      	ldr	r3, [pc, #228]	; (8000f74 <HAL_RCC_OscConfig+0x298>)
 8000e8e:	685b      	ldr	r3, [r3, #4]
 8000e90:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	69db      	ldr	r3, [r3, #28]
 8000e98:	021b      	lsls	r3, r3, #8
 8000e9a:	4936      	ldr	r1, [pc, #216]	; (8000f74 <HAL_RCC_OscConfig+0x298>)
 8000e9c:	4313      	orrs	r3, r2
 8000e9e:	604b      	str	r3, [r1, #4]
 8000ea0:	e01a      	b.n	8000ed8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000ea2:	4b34      	ldr	r3, [pc, #208]	; (8000f74 <HAL_RCC_OscConfig+0x298>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	4a33      	ldr	r2, [pc, #204]	; (8000f74 <HAL_RCC_OscConfig+0x298>)
 8000ea8:	f023 0301 	bic.w	r3, r3, #1
 8000eac:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000eae:	f7ff fbb9 	bl	8000624 <HAL_GetTick>
 8000eb2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000eb4:	e008      	b.n	8000ec8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000eb6:	f7ff fbb5 	bl	8000624 <HAL_GetTick>
 8000eba:	4602      	mov	r2, r0
 8000ebc:	693b      	ldr	r3, [r7, #16]
 8000ebe:	1ad3      	subs	r3, r2, r3
 8000ec0:	2b02      	cmp	r3, #2
 8000ec2:	d901      	bls.n	8000ec8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8000ec4:	2303      	movs	r3, #3
 8000ec6:	e2e7      	b.n	8001498 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000ec8:	4b2a      	ldr	r3, [pc, #168]	; (8000f74 <HAL_RCC_OscConfig+0x298>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	f003 0302 	and.w	r3, r3, #2
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d1f0      	bne.n	8000eb6 <HAL_RCC_OscConfig+0x1da>
 8000ed4:	e000      	b.n	8000ed8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000ed6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	f003 0301 	and.w	r3, r3, #1
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d074      	beq.n	8000fce <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8000ee4:	69bb      	ldr	r3, [r7, #24]
 8000ee6:	2b08      	cmp	r3, #8
 8000ee8:	d005      	beq.n	8000ef6 <HAL_RCC_OscConfig+0x21a>
 8000eea:	69bb      	ldr	r3, [r7, #24]
 8000eec:	2b0c      	cmp	r3, #12
 8000eee:	d10e      	bne.n	8000f0e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000ef0:	697b      	ldr	r3, [r7, #20]
 8000ef2:	2b03      	cmp	r3, #3
 8000ef4:	d10b      	bne.n	8000f0e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ef6:	4b1f      	ldr	r3, [pc, #124]	; (8000f74 <HAL_RCC_OscConfig+0x298>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d064      	beq.n	8000fcc <HAL_RCC_OscConfig+0x2f0>
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	685b      	ldr	r3, [r3, #4]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d160      	bne.n	8000fcc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	e2c4      	b.n	8001498 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	685b      	ldr	r3, [r3, #4]
 8000f12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f16:	d106      	bne.n	8000f26 <HAL_RCC_OscConfig+0x24a>
 8000f18:	4b16      	ldr	r3, [pc, #88]	; (8000f74 <HAL_RCC_OscConfig+0x298>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4a15      	ldr	r2, [pc, #84]	; (8000f74 <HAL_RCC_OscConfig+0x298>)
 8000f1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f22:	6013      	str	r3, [r2, #0]
 8000f24:	e01d      	b.n	8000f62 <HAL_RCC_OscConfig+0x286>
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	685b      	ldr	r3, [r3, #4]
 8000f2a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f2e:	d10c      	bne.n	8000f4a <HAL_RCC_OscConfig+0x26e>
 8000f30:	4b10      	ldr	r3, [pc, #64]	; (8000f74 <HAL_RCC_OscConfig+0x298>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	4a0f      	ldr	r2, [pc, #60]	; (8000f74 <HAL_RCC_OscConfig+0x298>)
 8000f36:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f3a:	6013      	str	r3, [r2, #0]
 8000f3c:	4b0d      	ldr	r3, [pc, #52]	; (8000f74 <HAL_RCC_OscConfig+0x298>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4a0c      	ldr	r2, [pc, #48]	; (8000f74 <HAL_RCC_OscConfig+0x298>)
 8000f42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f46:	6013      	str	r3, [r2, #0]
 8000f48:	e00b      	b.n	8000f62 <HAL_RCC_OscConfig+0x286>
 8000f4a:	4b0a      	ldr	r3, [pc, #40]	; (8000f74 <HAL_RCC_OscConfig+0x298>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	4a09      	ldr	r2, [pc, #36]	; (8000f74 <HAL_RCC_OscConfig+0x298>)
 8000f50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f54:	6013      	str	r3, [r2, #0]
 8000f56:	4b07      	ldr	r3, [pc, #28]	; (8000f74 <HAL_RCC_OscConfig+0x298>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	4a06      	ldr	r2, [pc, #24]	; (8000f74 <HAL_RCC_OscConfig+0x298>)
 8000f5c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f60:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	685b      	ldr	r3, [r3, #4]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d01c      	beq.n	8000fa4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f6a:	f7ff fb5b 	bl	8000624 <HAL_GetTick>
 8000f6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000f70:	e011      	b.n	8000f96 <HAL_RCC_OscConfig+0x2ba>
 8000f72:	bf00      	nop
 8000f74:	40021000 	.word	0x40021000
 8000f78:	08002110 	.word	0x08002110
 8000f7c:	20000000 	.word	0x20000000
 8000f80:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f84:	f7ff fb4e 	bl	8000624 <HAL_GetTick>
 8000f88:	4602      	mov	r2, r0
 8000f8a:	693b      	ldr	r3, [r7, #16]
 8000f8c:	1ad3      	subs	r3, r2, r3
 8000f8e:	2b64      	cmp	r3, #100	; 0x64
 8000f90:	d901      	bls.n	8000f96 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8000f92:	2303      	movs	r3, #3
 8000f94:	e280      	b.n	8001498 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000f96:	4baf      	ldr	r3, [pc, #700]	; (8001254 <HAL_RCC_OscConfig+0x578>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d0f0      	beq.n	8000f84 <HAL_RCC_OscConfig+0x2a8>
 8000fa2:	e014      	b.n	8000fce <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fa4:	f7ff fb3e 	bl	8000624 <HAL_GetTick>
 8000fa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000faa:	e008      	b.n	8000fbe <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000fac:	f7ff fb3a 	bl	8000624 <HAL_GetTick>
 8000fb0:	4602      	mov	r2, r0
 8000fb2:	693b      	ldr	r3, [r7, #16]
 8000fb4:	1ad3      	subs	r3, r2, r3
 8000fb6:	2b64      	cmp	r3, #100	; 0x64
 8000fb8:	d901      	bls.n	8000fbe <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8000fba:	2303      	movs	r3, #3
 8000fbc:	e26c      	b.n	8001498 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000fbe:	4ba5      	ldr	r3, [pc, #660]	; (8001254 <HAL_RCC_OscConfig+0x578>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d1f0      	bne.n	8000fac <HAL_RCC_OscConfig+0x2d0>
 8000fca:	e000      	b.n	8000fce <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fcc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	f003 0302 	and.w	r3, r3, #2
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d060      	beq.n	800109c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8000fda:	69bb      	ldr	r3, [r7, #24]
 8000fdc:	2b04      	cmp	r3, #4
 8000fde:	d005      	beq.n	8000fec <HAL_RCC_OscConfig+0x310>
 8000fe0:	69bb      	ldr	r3, [r7, #24]
 8000fe2:	2b0c      	cmp	r3, #12
 8000fe4:	d119      	bne.n	800101a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000fe6:	697b      	ldr	r3, [r7, #20]
 8000fe8:	2b02      	cmp	r3, #2
 8000fea:	d116      	bne.n	800101a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000fec:	4b99      	ldr	r3, [pc, #612]	; (8001254 <HAL_RCC_OscConfig+0x578>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d005      	beq.n	8001004 <HAL_RCC_OscConfig+0x328>
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	68db      	ldr	r3, [r3, #12]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d101      	bne.n	8001004 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001000:	2301      	movs	r3, #1
 8001002:	e249      	b.n	8001498 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001004:	4b93      	ldr	r3, [pc, #588]	; (8001254 <HAL_RCC_OscConfig+0x578>)
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	691b      	ldr	r3, [r3, #16]
 8001010:	061b      	lsls	r3, r3, #24
 8001012:	4990      	ldr	r1, [pc, #576]	; (8001254 <HAL_RCC_OscConfig+0x578>)
 8001014:	4313      	orrs	r3, r2
 8001016:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001018:	e040      	b.n	800109c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	68db      	ldr	r3, [r3, #12]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d023      	beq.n	800106a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001022:	4b8c      	ldr	r3, [pc, #560]	; (8001254 <HAL_RCC_OscConfig+0x578>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	4a8b      	ldr	r2, [pc, #556]	; (8001254 <HAL_RCC_OscConfig+0x578>)
 8001028:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800102c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800102e:	f7ff faf9 	bl	8000624 <HAL_GetTick>
 8001032:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001034:	e008      	b.n	8001048 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001036:	f7ff faf5 	bl	8000624 <HAL_GetTick>
 800103a:	4602      	mov	r2, r0
 800103c:	693b      	ldr	r3, [r7, #16]
 800103e:	1ad3      	subs	r3, r2, r3
 8001040:	2b02      	cmp	r3, #2
 8001042:	d901      	bls.n	8001048 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001044:	2303      	movs	r3, #3
 8001046:	e227      	b.n	8001498 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001048:	4b82      	ldr	r3, [pc, #520]	; (8001254 <HAL_RCC_OscConfig+0x578>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001050:	2b00      	cmp	r3, #0
 8001052:	d0f0      	beq.n	8001036 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001054:	4b7f      	ldr	r3, [pc, #508]	; (8001254 <HAL_RCC_OscConfig+0x578>)
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	691b      	ldr	r3, [r3, #16]
 8001060:	061b      	lsls	r3, r3, #24
 8001062:	497c      	ldr	r1, [pc, #496]	; (8001254 <HAL_RCC_OscConfig+0x578>)
 8001064:	4313      	orrs	r3, r2
 8001066:	604b      	str	r3, [r1, #4]
 8001068:	e018      	b.n	800109c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800106a:	4b7a      	ldr	r3, [pc, #488]	; (8001254 <HAL_RCC_OscConfig+0x578>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	4a79      	ldr	r2, [pc, #484]	; (8001254 <HAL_RCC_OscConfig+0x578>)
 8001070:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001074:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001076:	f7ff fad5 	bl	8000624 <HAL_GetTick>
 800107a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800107c:	e008      	b.n	8001090 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800107e:	f7ff fad1 	bl	8000624 <HAL_GetTick>
 8001082:	4602      	mov	r2, r0
 8001084:	693b      	ldr	r3, [r7, #16]
 8001086:	1ad3      	subs	r3, r2, r3
 8001088:	2b02      	cmp	r3, #2
 800108a:	d901      	bls.n	8001090 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800108c:	2303      	movs	r3, #3
 800108e:	e203      	b.n	8001498 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001090:	4b70      	ldr	r3, [pc, #448]	; (8001254 <HAL_RCC_OscConfig+0x578>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001098:	2b00      	cmp	r3, #0
 800109a:	d1f0      	bne.n	800107e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f003 0308 	and.w	r3, r3, #8
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d03c      	beq.n	8001122 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	695b      	ldr	r3, [r3, #20]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d01c      	beq.n	80010ea <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80010b0:	4b68      	ldr	r3, [pc, #416]	; (8001254 <HAL_RCC_OscConfig+0x578>)
 80010b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80010b6:	4a67      	ldr	r2, [pc, #412]	; (8001254 <HAL_RCC_OscConfig+0x578>)
 80010b8:	f043 0301 	orr.w	r3, r3, #1
 80010bc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80010c0:	f7ff fab0 	bl	8000624 <HAL_GetTick>
 80010c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80010c6:	e008      	b.n	80010da <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010c8:	f7ff faac 	bl	8000624 <HAL_GetTick>
 80010cc:	4602      	mov	r2, r0
 80010ce:	693b      	ldr	r3, [r7, #16]
 80010d0:	1ad3      	subs	r3, r2, r3
 80010d2:	2b02      	cmp	r3, #2
 80010d4:	d901      	bls.n	80010da <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80010d6:	2303      	movs	r3, #3
 80010d8:	e1de      	b.n	8001498 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80010da:	4b5e      	ldr	r3, [pc, #376]	; (8001254 <HAL_RCC_OscConfig+0x578>)
 80010dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80010e0:	f003 0302 	and.w	r3, r3, #2
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d0ef      	beq.n	80010c8 <HAL_RCC_OscConfig+0x3ec>
 80010e8:	e01b      	b.n	8001122 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80010ea:	4b5a      	ldr	r3, [pc, #360]	; (8001254 <HAL_RCC_OscConfig+0x578>)
 80010ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80010f0:	4a58      	ldr	r2, [pc, #352]	; (8001254 <HAL_RCC_OscConfig+0x578>)
 80010f2:	f023 0301 	bic.w	r3, r3, #1
 80010f6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80010fa:	f7ff fa93 	bl	8000624 <HAL_GetTick>
 80010fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001100:	e008      	b.n	8001114 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001102:	f7ff fa8f 	bl	8000624 <HAL_GetTick>
 8001106:	4602      	mov	r2, r0
 8001108:	693b      	ldr	r3, [r7, #16]
 800110a:	1ad3      	subs	r3, r2, r3
 800110c:	2b02      	cmp	r3, #2
 800110e:	d901      	bls.n	8001114 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001110:	2303      	movs	r3, #3
 8001112:	e1c1      	b.n	8001498 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001114:	4b4f      	ldr	r3, [pc, #316]	; (8001254 <HAL_RCC_OscConfig+0x578>)
 8001116:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800111a:	f003 0302 	and.w	r3, r3, #2
 800111e:	2b00      	cmp	r3, #0
 8001120:	d1ef      	bne.n	8001102 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f003 0304 	and.w	r3, r3, #4
 800112a:	2b00      	cmp	r3, #0
 800112c:	f000 80a6 	beq.w	800127c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001130:	2300      	movs	r3, #0
 8001132:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001134:	4b47      	ldr	r3, [pc, #284]	; (8001254 <HAL_RCC_OscConfig+0x578>)
 8001136:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001138:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800113c:	2b00      	cmp	r3, #0
 800113e:	d10d      	bne.n	800115c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001140:	4b44      	ldr	r3, [pc, #272]	; (8001254 <HAL_RCC_OscConfig+0x578>)
 8001142:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001144:	4a43      	ldr	r2, [pc, #268]	; (8001254 <HAL_RCC_OscConfig+0x578>)
 8001146:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800114a:	6593      	str	r3, [r2, #88]	; 0x58
 800114c:	4b41      	ldr	r3, [pc, #260]	; (8001254 <HAL_RCC_OscConfig+0x578>)
 800114e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001150:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001154:	60bb      	str	r3, [r7, #8]
 8001156:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001158:	2301      	movs	r3, #1
 800115a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800115c:	4b3e      	ldr	r3, [pc, #248]	; (8001258 <HAL_RCC_OscConfig+0x57c>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001164:	2b00      	cmp	r3, #0
 8001166:	d118      	bne.n	800119a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001168:	4b3b      	ldr	r3, [pc, #236]	; (8001258 <HAL_RCC_OscConfig+0x57c>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4a3a      	ldr	r2, [pc, #232]	; (8001258 <HAL_RCC_OscConfig+0x57c>)
 800116e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001172:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001174:	f7ff fa56 	bl	8000624 <HAL_GetTick>
 8001178:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800117a:	e008      	b.n	800118e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800117c:	f7ff fa52 	bl	8000624 <HAL_GetTick>
 8001180:	4602      	mov	r2, r0
 8001182:	693b      	ldr	r3, [r7, #16]
 8001184:	1ad3      	subs	r3, r2, r3
 8001186:	2b02      	cmp	r3, #2
 8001188:	d901      	bls.n	800118e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800118a:	2303      	movs	r3, #3
 800118c:	e184      	b.n	8001498 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800118e:	4b32      	ldr	r3, [pc, #200]	; (8001258 <HAL_RCC_OscConfig+0x57c>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001196:	2b00      	cmp	r3, #0
 8001198:	d0f0      	beq.n	800117c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	689b      	ldr	r3, [r3, #8]
 800119e:	2b01      	cmp	r3, #1
 80011a0:	d108      	bne.n	80011b4 <HAL_RCC_OscConfig+0x4d8>
 80011a2:	4b2c      	ldr	r3, [pc, #176]	; (8001254 <HAL_RCC_OscConfig+0x578>)
 80011a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80011a8:	4a2a      	ldr	r2, [pc, #168]	; (8001254 <HAL_RCC_OscConfig+0x578>)
 80011aa:	f043 0301 	orr.w	r3, r3, #1
 80011ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80011b2:	e024      	b.n	80011fe <HAL_RCC_OscConfig+0x522>
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	689b      	ldr	r3, [r3, #8]
 80011b8:	2b05      	cmp	r3, #5
 80011ba:	d110      	bne.n	80011de <HAL_RCC_OscConfig+0x502>
 80011bc:	4b25      	ldr	r3, [pc, #148]	; (8001254 <HAL_RCC_OscConfig+0x578>)
 80011be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80011c2:	4a24      	ldr	r2, [pc, #144]	; (8001254 <HAL_RCC_OscConfig+0x578>)
 80011c4:	f043 0304 	orr.w	r3, r3, #4
 80011c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80011cc:	4b21      	ldr	r3, [pc, #132]	; (8001254 <HAL_RCC_OscConfig+0x578>)
 80011ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80011d2:	4a20      	ldr	r2, [pc, #128]	; (8001254 <HAL_RCC_OscConfig+0x578>)
 80011d4:	f043 0301 	orr.w	r3, r3, #1
 80011d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80011dc:	e00f      	b.n	80011fe <HAL_RCC_OscConfig+0x522>
 80011de:	4b1d      	ldr	r3, [pc, #116]	; (8001254 <HAL_RCC_OscConfig+0x578>)
 80011e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80011e4:	4a1b      	ldr	r2, [pc, #108]	; (8001254 <HAL_RCC_OscConfig+0x578>)
 80011e6:	f023 0301 	bic.w	r3, r3, #1
 80011ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80011ee:	4b19      	ldr	r3, [pc, #100]	; (8001254 <HAL_RCC_OscConfig+0x578>)
 80011f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80011f4:	4a17      	ldr	r2, [pc, #92]	; (8001254 <HAL_RCC_OscConfig+0x578>)
 80011f6:	f023 0304 	bic.w	r3, r3, #4
 80011fa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	689b      	ldr	r3, [r3, #8]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d016      	beq.n	8001234 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001206:	f7ff fa0d 	bl	8000624 <HAL_GetTick>
 800120a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800120c:	e00a      	b.n	8001224 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800120e:	f7ff fa09 	bl	8000624 <HAL_GetTick>
 8001212:	4602      	mov	r2, r0
 8001214:	693b      	ldr	r3, [r7, #16]
 8001216:	1ad3      	subs	r3, r2, r3
 8001218:	f241 3288 	movw	r2, #5000	; 0x1388
 800121c:	4293      	cmp	r3, r2
 800121e:	d901      	bls.n	8001224 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001220:	2303      	movs	r3, #3
 8001222:	e139      	b.n	8001498 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001224:	4b0b      	ldr	r3, [pc, #44]	; (8001254 <HAL_RCC_OscConfig+0x578>)
 8001226:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800122a:	f003 0302 	and.w	r3, r3, #2
 800122e:	2b00      	cmp	r3, #0
 8001230:	d0ed      	beq.n	800120e <HAL_RCC_OscConfig+0x532>
 8001232:	e01a      	b.n	800126a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001234:	f7ff f9f6 	bl	8000624 <HAL_GetTick>
 8001238:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800123a:	e00f      	b.n	800125c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800123c:	f7ff f9f2 	bl	8000624 <HAL_GetTick>
 8001240:	4602      	mov	r2, r0
 8001242:	693b      	ldr	r3, [r7, #16]
 8001244:	1ad3      	subs	r3, r2, r3
 8001246:	f241 3288 	movw	r2, #5000	; 0x1388
 800124a:	4293      	cmp	r3, r2
 800124c:	d906      	bls.n	800125c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800124e:	2303      	movs	r3, #3
 8001250:	e122      	b.n	8001498 <HAL_RCC_OscConfig+0x7bc>
 8001252:	bf00      	nop
 8001254:	40021000 	.word	0x40021000
 8001258:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800125c:	4b90      	ldr	r3, [pc, #576]	; (80014a0 <HAL_RCC_OscConfig+0x7c4>)
 800125e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001262:	f003 0302 	and.w	r3, r3, #2
 8001266:	2b00      	cmp	r3, #0
 8001268:	d1e8      	bne.n	800123c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800126a:	7ffb      	ldrb	r3, [r7, #31]
 800126c:	2b01      	cmp	r3, #1
 800126e:	d105      	bne.n	800127c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001270:	4b8b      	ldr	r3, [pc, #556]	; (80014a0 <HAL_RCC_OscConfig+0x7c4>)
 8001272:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001274:	4a8a      	ldr	r2, [pc, #552]	; (80014a0 <HAL_RCC_OscConfig+0x7c4>)
 8001276:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800127a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001280:	2b00      	cmp	r3, #0
 8001282:	f000 8108 	beq.w	8001496 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800128a:	2b02      	cmp	r3, #2
 800128c:	f040 80d0 	bne.w	8001430 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001290:	4b83      	ldr	r3, [pc, #524]	; (80014a0 <HAL_RCC_OscConfig+0x7c4>)
 8001292:	68db      	ldr	r3, [r3, #12]
 8001294:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001296:	697b      	ldr	r3, [r7, #20]
 8001298:	f003 0203 	and.w	r2, r3, #3
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012a0:	429a      	cmp	r2, r3
 80012a2:	d130      	bne.n	8001306 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80012a4:	697b      	ldr	r3, [r7, #20]
 80012a6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ae:	3b01      	subs	r3, #1
 80012b0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80012b2:	429a      	cmp	r2, r3
 80012b4:	d127      	bne.n	8001306 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80012b6:	697b      	ldr	r3, [r7, #20]
 80012b8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012c0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80012c2:	429a      	cmp	r2, r3
 80012c4:	d11f      	bne.n	8001306 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80012c6:	697b      	ldr	r3, [r7, #20]
 80012c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012cc:	687a      	ldr	r2, [r7, #4]
 80012ce:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80012d0:	2a07      	cmp	r2, #7
 80012d2:	bf14      	ite	ne
 80012d4:	2201      	movne	r2, #1
 80012d6:	2200      	moveq	r2, #0
 80012d8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80012da:	4293      	cmp	r3, r2
 80012dc:	d113      	bne.n	8001306 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80012de:	697b      	ldr	r3, [r7, #20]
 80012e0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012e8:	085b      	lsrs	r3, r3, #1
 80012ea:	3b01      	subs	r3, #1
 80012ec:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80012ee:	429a      	cmp	r2, r3
 80012f0:	d109      	bne.n	8001306 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80012f2:	697b      	ldr	r3, [r7, #20]
 80012f4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012fc:	085b      	lsrs	r3, r3, #1
 80012fe:	3b01      	subs	r3, #1
 8001300:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001302:	429a      	cmp	r2, r3
 8001304:	d06e      	beq.n	80013e4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001306:	69bb      	ldr	r3, [r7, #24]
 8001308:	2b0c      	cmp	r3, #12
 800130a:	d069      	beq.n	80013e0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800130c:	4b64      	ldr	r3, [pc, #400]	; (80014a0 <HAL_RCC_OscConfig+0x7c4>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001314:	2b00      	cmp	r3, #0
 8001316:	d105      	bne.n	8001324 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001318:	4b61      	ldr	r3, [pc, #388]	; (80014a0 <HAL_RCC_OscConfig+0x7c4>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001320:	2b00      	cmp	r3, #0
 8001322:	d001      	beq.n	8001328 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001324:	2301      	movs	r3, #1
 8001326:	e0b7      	b.n	8001498 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001328:	4b5d      	ldr	r3, [pc, #372]	; (80014a0 <HAL_RCC_OscConfig+0x7c4>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4a5c      	ldr	r2, [pc, #368]	; (80014a0 <HAL_RCC_OscConfig+0x7c4>)
 800132e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001332:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001334:	f7ff f976 	bl	8000624 <HAL_GetTick>
 8001338:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800133a:	e008      	b.n	800134e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800133c:	f7ff f972 	bl	8000624 <HAL_GetTick>
 8001340:	4602      	mov	r2, r0
 8001342:	693b      	ldr	r3, [r7, #16]
 8001344:	1ad3      	subs	r3, r2, r3
 8001346:	2b02      	cmp	r3, #2
 8001348:	d901      	bls.n	800134e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800134a:	2303      	movs	r3, #3
 800134c:	e0a4      	b.n	8001498 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800134e:	4b54      	ldr	r3, [pc, #336]	; (80014a0 <HAL_RCC_OscConfig+0x7c4>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001356:	2b00      	cmp	r3, #0
 8001358:	d1f0      	bne.n	800133c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800135a:	4b51      	ldr	r3, [pc, #324]	; (80014a0 <HAL_RCC_OscConfig+0x7c4>)
 800135c:	68da      	ldr	r2, [r3, #12]
 800135e:	4b51      	ldr	r3, [pc, #324]	; (80014a4 <HAL_RCC_OscConfig+0x7c8>)
 8001360:	4013      	ands	r3, r2
 8001362:	687a      	ldr	r2, [r7, #4]
 8001364:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001366:	687a      	ldr	r2, [r7, #4]
 8001368:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800136a:	3a01      	subs	r2, #1
 800136c:	0112      	lsls	r2, r2, #4
 800136e:	4311      	orrs	r1, r2
 8001370:	687a      	ldr	r2, [r7, #4]
 8001372:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001374:	0212      	lsls	r2, r2, #8
 8001376:	4311      	orrs	r1, r2
 8001378:	687a      	ldr	r2, [r7, #4]
 800137a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800137c:	0852      	lsrs	r2, r2, #1
 800137e:	3a01      	subs	r2, #1
 8001380:	0552      	lsls	r2, r2, #21
 8001382:	4311      	orrs	r1, r2
 8001384:	687a      	ldr	r2, [r7, #4]
 8001386:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001388:	0852      	lsrs	r2, r2, #1
 800138a:	3a01      	subs	r2, #1
 800138c:	0652      	lsls	r2, r2, #25
 800138e:	4311      	orrs	r1, r2
 8001390:	687a      	ldr	r2, [r7, #4]
 8001392:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001394:	0912      	lsrs	r2, r2, #4
 8001396:	0452      	lsls	r2, r2, #17
 8001398:	430a      	orrs	r2, r1
 800139a:	4941      	ldr	r1, [pc, #260]	; (80014a0 <HAL_RCC_OscConfig+0x7c4>)
 800139c:	4313      	orrs	r3, r2
 800139e:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80013a0:	4b3f      	ldr	r3, [pc, #252]	; (80014a0 <HAL_RCC_OscConfig+0x7c4>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a3e      	ldr	r2, [pc, #248]	; (80014a0 <HAL_RCC_OscConfig+0x7c4>)
 80013a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80013aa:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80013ac:	4b3c      	ldr	r3, [pc, #240]	; (80014a0 <HAL_RCC_OscConfig+0x7c4>)
 80013ae:	68db      	ldr	r3, [r3, #12]
 80013b0:	4a3b      	ldr	r2, [pc, #236]	; (80014a0 <HAL_RCC_OscConfig+0x7c4>)
 80013b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80013b6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80013b8:	f7ff f934 	bl	8000624 <HAL_GetTick>
 80013bc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80013be:	e008      	b.n	80013d2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013c0:	f7ff f930 	bl	8000624 <HAL_GetTick>
 80013c4:	4602      	mov	r2, r0
 80013c6:	693b      	ldr	r3, [r7, #16]
 80013c8:	1ad3      	subs	r3, r2, r3
 80013ca:	2b02      	cmp	r3, #2
 80013cc:	d901      	bls.n	80013d2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80013ce:	2303      	movs	r3, #3
 80013d0:	e062      	b.n	8001498 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80013d2:	4b33      	ldr	r3, [pc, #204]	; (80014a0 <HAL_RCC_OscConfig+0x7c4>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d0f0      	beq.n	80013c0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80013de:	e05a      	b.n	8001496 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80013e0:	2301      	movs	r3, #1
 80013e2:	e059      	b.n	8001498 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80013e4:	4b2e      	ldr	r3, [pc, #184]	; (80014a0 <HAL_RCC_OscConfig+0x7c4>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d152      	bne.n	8001496 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80013f0:	4b2b      	ldr	r3, [pc, #172]	; (80014a0 <HAL_RCC_OscConfig+0x7c4>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4a2a      	ldr	r2, [pc, #168]	; (80014a0 <HAL_RCC_OscConfig+0x7c4>)
 80013f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80013fa:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80013fc:	4b28      	ldr	r3, [pc, #160]	; (80014a0 <HAL_RCC_OscConfig+0x7c4>)
 80013fe:	68db      	ldr	r3, [r3, #12]
 8001400:	4a27      	ldr	r2, [pc, #156]	; (80014a0 <HAL_RCC_OscConfig+0x7c4>)
 8001402:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001406:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001408:	f7ff f90c 	bl	8000624 <HAL_GetTick>
 800140c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800140e:	e008      	b.n	8001422 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001410:	f7ff f908 	bl	8000624 <HAL_GetTick>
 8001414:	4602      	mov	r2, r0
 8001416:	693b      	ldr	r3, [r7, #16]
 8001418:	1ad3      	subs	r3, r2, r3
 800141a:	2b02      	cmp	r3, #2
 800141c:	d901      	bls.n	8001422 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800141e:	2303      	movs	r3, #3
 8001420:	e03a      	b.n	8001498 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001422:	4b1f      	ldr	r3, [pc, #124]	; (80014a0 <HAL_RCC_OscConfig+0x7c4>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800142a:	2b00      	cmp	r3, #0
 800142c:	d0f0      	beq.n	8001410 <HAL_RCC_OscConfig+0x734>
 800142e:	e032      	b.n	8001496 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001430:	69bb      	ldr	r3, [r7, #24]
 8001432:	2b0c      	cmp	r3, #12
 8001434:	d02d      	beq.n	8001492 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001436:	4b1a      	ldr	r3, [pc, #104]	; (80014a0 <HAL_RCC_OscConfig+0x7c4>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4a19      	ldr	r2, [pc, #100]	; (80014a0 <HAL_RCC_OscConfig+0x7c4>)
 800143c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001440:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8001442:	4b17      	ldr	r3, [pc, #92]	; (80014a0 <HAL_RCC_OscConfig+0x7c4>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800144a:	2b00      	cmp	r3, #0
 800144c:	d105      	bne.n	800145a <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800144e:	4b14      	ldr	r3, [pc, #80]	; (80014a0 <HAL_RCC_OscConfig+0x7c4>)
 8001450:	68db      	ldr	r3, [r3, #12]
 8001452:	4a13      	ldr	r2, [pc, #76]	; (80014a0 <HAL_RCC_OscConfig+0x7c4>)
 8001454:	f023 0303 	bic.w	r3, r3, #3
 8001458:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800145a:	4b11      	ldr	r3, [pc, #68]	; (80014a0 <HAL_RCC_OscConfig+0x7c4>)
 800145c:	68db      	ldr	r3, [r3, #12]
 800145e:	4a10      	ldr	r2, [pc, #64]	; (80014a0 <HAL_RCC_OscConfig+0x7c4>)
 8001460:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001464:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001468:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800146a:	f7ff f8db 	bl	8000624 <HAL_GetTick>
 800146e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001470:	e008      	b.n	8001484 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001472:	f7ff f8d7 	bl	8000624 <HAL_GetTick>
 8001476:	4602      	mov	r2, r0
 8001478:	693b      	ldr	r3, [r7, #16]
 800147a:	1ad3      	subs	r3, r2, r3
 800147c:	2b02      	cmp	r3, #2
 800147e:	d901      	bls.n	8001484 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8001480:	2303      	movs	r3, #3
 8001482:	e009      	b.n	8001498 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001484:	4b06      	ldr	r3, [pc, #24]	; (80014a0 <HAL_RCC_OscConfig+0x7c4>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800148c:	2b00      	cmp	r3, #0
 800148e:	d1f0      	bne.n	8001472 <HAL_RCC_OscConfig+0x796>
 8001490:	e001      	b.n	8001496 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001492:	2301      	movs	r3, #1
 8001494:	e000      	b.n	8001498 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8001496:	2300      	movs	r3, #0
}
 8001498:	4618      	mov	r0, r3
 800149a:	3720      	adds	r7, #32
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	40021000 	.word	0x40021000
 80014a4:	f99d808c 	.word	0xf99d808c

080014a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b084      	sub	sp, #16
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
 80014b0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d101      	bne.n	80014bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80014b8:	2301      	movs	r3, #1
 80014ba:	e0c8      	b.n	800164e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80014bc:	4b66      	ldr	r3, [pc, #408]	; (8001658 <HAL_RCC_ClockConfig+0x1b0>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f003 0307 	and.w	r3, r3, #7
 80014c4:	683a      	ldr	r2, [r7, #0]
 80014c6:	429a      	cmp	r2, r3
 80014c8:	d910      	bls.n	80014ec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014ca:	4b63      	ldr	r3, [pc, #396]	; (8001658 <HAL_RCC_ClockConfig+0x1b0>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f023 0207 	bic.w	r2, r3, #7
 80014d2:	4961      	ldr	r1, [pc, #388]	; (8001658 <HAL_RCC_ClockConfig+0x1b0>)
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	4313      	orrs	r3, r2
 80014d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80014da:	4b5f      	ldr	r3, [pc, #380]	; (8001658 <HAL_RCC_ClockConfig+0x1b0>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f003 0307 	and.w	r3, r3, #7
 80014e2:	683a      	ldr	r2, [r7, #0]
 80014e4:	429a      	cmp	r2, r3
 80014e6:	d001      	beq.n	80014ec <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80014e8:	2301      	movs	r3, #1
 80014ea:	e0b0      	b.n	800164e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f003 0301 	and.w	r3, r3, #1
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d04c      	beq.n	8001592 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	2b03      	cmp	r3, #3
 80014fe:	d107      	bne.n	8001510 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001500:	4b56      	ldr	r3, [pc, #344]	; (800165c <HAL_RCC_ClockConfig+0x1b4>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001508:	2b00      	cmp	r3, #0
 800150a:	d121      	bne.n	8001550 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 800150c:	2301      	movs	r3, #1
 800150e:	e09e      	b.n	800164e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	2b02      	cmp	r3, #2
 8001516:	d107      	bne.n	8001528 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001518:	4b50      	ldr	r3, [pc, #320]	; (800165c <HAL_RCC_ClockConfig+0x1b4>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001520:	2b00      	cmp	r3, #0
 8001522:	d115      	bne.n	8001550 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001524:	2301      	movs	r3, #1
 8001526:	e092      	b.n	800164e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d107      	bne.n	8001540 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001530:	4b4a      	ldr	r3, [pc, #296]	; (800165c <HAL_RCC_ClockConfig+0x1b4>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f003 0302 	and.w	r3, r3, #2
 8001538:	2b00      	cmp	r3, #0
 800153a:	d109      	bne.n	8001550 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800153c:	2301      	movs	r3, #1
 800153e:	e086      	b.n	800164e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001540:	4b46      	ldr	r3, [pc, #280]	; (800165c <HAL_RCC_ClockConfig+0x1b4>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001548:	2b00      	cmp	r3, #0
 800154a:	d101      	bne.n	8001550 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800154c:	2301      	movs	r3, #1
 800154e:	e07e      	b.n	800164e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001550:	4b42      	ldr	r3, [pc, #264]	; (800165c <HAL_RCC_ClockConfig+0x1b4>)
 8001552:	689b      	ldr	r3, [r3, #8]
 8001554:	f023 0203 	bic.w	r2, r3, #3
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	493f      	ldr	r1, [pc, #252]	; (800165c <HAL_RCC_ClockConfig+0x1b4>)
 800155e:	4313      	orrs	r3, r2
 8001560:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001562:	f7ff f85f 	bl	8000624 <HAL_GetTick>
 8001566:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001568:	e00a      	b.n	8001580 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800156a:	f7ff f85b 	bl	8000624 <HAL_GetTick>
 800156e:	4602      	mov	r2, r0
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	1ad3      	subs	r3, r2, r3
 8001574:	f241 3288 	movw	r2, #5000	; 0x1388
 8001578:	4293      	cmp	r3, r2
 800157a:	d901      	bls.n	8001580 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 800157c:	2303      	movs	r3, #3
 800157e:	e066      	b.n	800164e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001580:	4b36      	ldr	r3, [pc, #216]	; (800165c <HAL_RCC_ClockConfig+0x1b4>)
 8001582:	689b      	ldr	r3, [r3, #8]
 8001584:	f003 020c 	and.w	r2, r3, #12
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	009b      	lsls	r3, r3, #2
 800158e:	429a      	cmp	r2, r3
 8001590:	d1eb      	bne.n	800156a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f003 0302 	and.w	r3, r3, #2
 800159a:	2b00      	cmp	r3, #0
 800159c:	d008      	beq.n	80015b0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800159e:	4b2f      	ldr	r3, [pc, #188]	; (800165c <HAL_RCC_ClockConfig+0x1b4>)
 80015a0:	689b      	ldr	r3, [r3, #8]
 80015a2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	689b      	ldr	r3, [r3, #8]
 80015aa:	492c      	ldr	r1, [pc, #176]	; (800165c <HAL_RCC_ClockConfig+0x1b4>)
 80015ac:	4313      	orrs	r3, r2
 80015ae:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80015b0:	4b29      	ldr	r3, [pc, #164]	; (8001658 <HAL_RCC_ClockConfig+0x1b0>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f003 0307 	and.w	r3, r3, #7
 80015b8:	683a      	ldr	r2, [r7, #0]
 80015ba:	429a      	cmp	r2, r3
 80015bc:	d210      	bcs.n	80015e0 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015be:	4b26      	ldr	r3, [pc, #152]	; (8001658 <HAL_RCC_ClockConfig+0x1b0>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f023 0207 	bic.w	r2, r3, #7
 80015c6:	4924      	ldr	r1, [pc, #144]	; (8001658 <HAL_RCC_ClockConfig+0x1b0>)
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	4313      	orrs	r3, r2
 80015cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015ce:	4b22      	ldr	r3, [pc, #136]	; (8001658 <HAL_RCC_ClockConfig+0x1b0>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f003 0307 	and.w	r3, r3, #7
 80015d6:	683a      	ldr	r2, [r7, #0]
 80015d8:	429a      	cmp	r2, r3
 80015da:	d001      	beq.n	80015e0 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80015dc:	2301      	movs	r3, #1
 80015de:	e036      	b.n	800164e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f003 0304 	and.w	r3, r3, #4
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d008      	beq.n	80015fe <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80015ec:	4b1b      	ldr	r3, [pc, #108]	; (800165c <HAL_RCC_ClockConfig+0x1b4>)
 80015ee:	689b      	ldr	r3, [r3, #8]
 80015f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	68db      	ldr	r3, [r3, #12]
 80015f8:	4918      	ldr	r1, [pc, #96]	; (800165c <HAL_RCC_ClockConfig+0x1b4>)
 80015fa:	4313      	orrs	r3, r2
 80015fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f003 0308 	and.w	r3, r3, #8
 8001606:	2b00      	cmp	r3, #0
 8001608:	d009      	beq.n	800161e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800160a:	4b14      	ldr	r3, [pc, #80]	; (800165c <HAL_RCC_ClockConfig+0x1b4>)
 800160c:	689b      	ldr	r3, [r3, #8]
 800160e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	691b      	ldr	r3, [r3, #16]
 8001616:	00db      	lsls	r3, r3, #3
 8001618:	4910      	ldr	r1, [pc, #64]	; (800165c <HAL_RCC_ClockConfig+0x1b4>)
 800161a:	4313      	orrs	r3, r2
 800161c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800161e:	f000 f825 	bl	800166c <HAL_RCC_GetSysClockFreq>
 8001622:	4601      	mov	r1, r0
 8001624:	4b0d      	ldr	r3, [pc, #52]	; (800165c <HAL_RCC_ClockConfig+0x1b4>)
 8001626:	689b      	ldr	r3, [r3, #8]
 8001628:	091b      	lsrs	r3, r3, #4
 800162a:	f003 030f 	and.w	r3, r3, #15
 800162e:	4a0c      	ldr	r2, [pc, #48]	; (8001660 <HAL_RCC_ClockConfig+0x1b8>)
 8001630:	5cd3      	ldrb	r3, [r2, r3]
 8001632:	f003 031f 	and.w	r3, r3, #31
 8001636:	fa21 f303 	lsr.w	r3, r1, r3
 800163a:	4a0a      	ldr	r2, [pc, #40]	; (8001664 <HAL_RCC_ClockConfig+0x1bc>)
 800163c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800163e:	4b0a      	ldr	r3, [pc, #40]	; (8001668 <HAL_RCC_ClockConfig+0x1c0>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4618      	mov	r0, r3
 8001644:	f7fe ffa2 	bl	800058c <HAL_InitTick>
 8001648:	4603      	mov	r3, r0
 800164a:	72fb      	strb	r3, [r7, #11]

  return status;
 800164c:	7afb      	ldrb	r3, [r7, #11]
}
 800164e:	4618      	mov	r0, r3
 8001650:	3710      	adds	r7, #16
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	40022000 	.word	0x40022000
 800165c:	40021000 	.word	0x40021000
 8001660:	08002110 	.word	0x08002110
 8001664:	20000000 	.word	0x20000000
 8001668:	20000004 	.word	0x20000004

0800166c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800166c:	b480      	push	{r7}
 800166e:	b089      	sub	sp, #36	; 0x24
 8001670:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001672:	2300      	movs	r3, #0
 8001674:	61fb      	str	r3, [r7, #28]
 8001676:	2300      	movs	r3, #0
 8001678:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800167a:	4b3d      	ldr	r3, [pc, #244]	; (8001770 <HAL_RCC_GetSysClockFreq+0x104>)
 800167c:	689b      	ldr	r3, [r3, #8]
 800167e:	f003 030c 	and.w	r3, r3, #12
 8001682:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001684:	4b3a      	ldr	r3, [pc, #232]	; (8001770 <HAL_RCC_GetSysClockFreq+0x104>)
 8001686:	68db      	ldr	r3, [r3, #12]
 8001688:	f003 0303 	and.w	r3, r3, #3
 800168c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800168e:	693b      	ldr	r3, [r7, #16]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d005      	beq.n	80016a0 <HAL_RCC_GetSysClockFreq+0x34>
 8001694:	693b      	ldr	r3, [r7, #16]
 8001696:	2b0c      	cmp	r3, #12
 8001698:	d121      	bne.n	80016de <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	2b01      	cmp	r3, #1
 800169e:	d11e      	bne.n	80016de <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80016a0:	4b33      	ldr	r3, [pc, #204]	; (8001770 <HAL_RCC_GetSysClockFreq+0x104>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f003 0308 	and.w	r3, r3, #8
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d107      	bne.n	80016bc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80016ac:	4b30      	ldr	r3, [pc, #192]	; (8001770 <HAL_RCC_GetSysClockFreq+0x104>)
 80016ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016b2:	0a1b      	lsrs	r3, r3, #8
 80016b4:	f003 030f 	and.w	r3, r3, #15
 80016b8:	61fb      	str	r3, [r7, #28]
 80016ba:	e005      	b.n	80016c8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80016bc:	4b2c      	ldr	r3, [pc, #176]	; (8001770 <HAL_RCC_GetSysClockFreq+0x104>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	091b      	lsrs	r3, r3, #4
 80016c2:	f003 030f 	and.w	r3, r3, #15
 80016c6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80016c8:	4a2a      	ldr	r2, [pc, #168]	; (8001774 <HAL_RCC_GetSysClockFreq+0x108>)
 80016ca:	69fb      	ldr	r3, [r7, #28]
 80016cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016d0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80016d2:	693b      	ldr	r3, [r7, #16]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d10d      	bne.n	80016f4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80016d8:	69fb      	ldr	r3, [r7, #28]
 80016da:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80016dc:	e00a      	b.n	80016f4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80016de:	693b      	ldr	r3, [r7, #16]
 80016e0:	2b04      	cmp	r3, #4
 80016e2:	d102      	bne.n	80016ea <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80016e4:	4b24      	ldr	r3, [pc, #144]	; (8001778 <HAL_RCC_GetSysClockFreq+0x10c>)
 80016e6:	61bb      	str	r3, [r7, #24]
 80016e8:	e004      	b.n	80016f4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80016ea:	693b      	ldr	r3, [r7, #16]
 80016ec:	2b08      	cmp	r3, #8
 80016ee:	d101      	bne.n	80016f4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80016f0:	4b22      	ldr	r3, [pc, #136]	; (800177c <HAL_RCC_GetSysClockFreq+0x110>)
 80016f2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80016f4:	693b      	ldr	r3, [r7, #16]
 80016f6:	2b0c      	cmp	r3, #12
 80016f8:	d133      	bne.n	8001762 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80016fa:	4b1d      	ldr	r3, [pc, #116]	; (8001770 <HAL_RCC_GetSysClockFreq+0x104>)
 80016fc:	68db      	ldr	r3, [r3, #12]
 80016fe:	f003 0303 	and.w	r3, r3, #3
 8001702:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001704:	68bb      	ldr	r3, [r7, #8]
 8001706:	2b02      	cmp	r3, #2
 8001708:	d002      	beq.n	8001710 <HAL_RCC_GetSysClockFreq+0xa4>
 800170a:	2b03      	cmp	r3, #3
 800170c:	d003      	beq.n	8001716 <HAL_RCC_GetSysClockFreq+0xaa>
 800170e:	e005      	b.n	800171c <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001710:	4b19      	ldr	r3, [pc, #100]	; (8001778 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001712:	617b      	str	r3, [r7, #20]
      break;
 8001714:	e005      	b.n	8001722 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001716:	4b19      	ldr	r3, [pc, #100]	; (800177c <HAL_RCC_GetSysClockFreq+0x110>)
 8001718:	617b      	str	r3, [r7, #20]
      break;
 800171a:	e002      	b.n	8001722 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800171c:	69fb      	ldr	r3, [r7, #28]
 800171e:	617b      	str	r3, [r7, #20]
      break;
 8001720:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001722:	4b13      	ldr	r3, [pc, #76]	; (8001770 <HAL_RCC_GetSysClockFreq+0x104>)
 8001724:	68db      	ldr	r3, [r3, #12]
 8001726:	091b      	lsrs	r3, r3, #4
 8001728:	f003 0307 	and.w	r3, r3, #7
 800172c:	3301      	adds	r3, #1
 800172e:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001730:	4b0f      	ldr	r3, [pc, #60]	; (8001770 <HAL_RCC_GetSysClockFreq+0x104>)
 8001732:	68db      	ldr	r3, [r3, #12]
 8001734:	0a1b      	lsrs	r3, r3, #8
 8001736:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800173a:	697a      	ldr	r2, [r7, #20]
 800173c:	fb02 f203 	mul.w	r2, r2, r3
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	fbb2 f3f3 	udiv	r3, r2, r3
 8001746:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001748:	4b09      	ldr	r3, [pc, #36]	; (8001770 <HAL_RCC_GetSysClockFreq+0x104>)
 800174a:	68db      	ldr	r3, [r3, #12]
 800174c:	0e5b      	lsrs	r3, r3, #25
 800174e:	f003 0303 	and.w	r3, r3, #3
 8001752:	3301      	adds	r3, #1
 8001754:	005b      	lsls	r3, r3, #1
 8001756:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001758:	697a      	ldr	r2, [r7, #20]
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001760:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001762:	69bb      	ldr	r3, [r7, #24]
}
 8001764:	4618      	mov	r0, r3
 8001766:	3724      	adds	r7, #36	; 0x24
 8001768:	46bd      	mov	sp, r7
 800176a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176e:	4770      	bx	lr
 8001770:	40021000 	.word	0x40021000
 8001774:	08002120 	.word	0x08002120
 8001778:	00f42400 	.word	0x00f42400
 800177c:	007a1200 	.word	0x007a1200

08001780 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b086      	sub	sp, #24
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001788:	2300      	movs	r3, #0
 800178a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800178c:	4b2a      	ldr	r3, [pc, #168]	; (8001838 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800178e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001790:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001794:	2b00      	cmp	r3, #0
 8001796:	d003      	beq.n	80017a0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001798:	f7ff fa3c 	bl	8000c14 <HAL_PWREx_GetVoltageRange>
 800179c:	6178      	str	r0, [r7, #20]
 800179e:	e014      	b.n	80017ca <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80017a0:	4b25      	ldr	r3, [pc, #148]	; (8001838 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80017a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017a4:	4a24      	ldr	r2, [pc, #144]	; (8001838 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80017a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017aa:	6593      	str	r3, [r2, #88]	; 0x58
 80017ac:	4b22      	ldr	r3, [pc, #136]	; (8001838 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80017ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017b4:	60fb      	str	r3, [r7, #12]
 80017b6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80017b8:	f7ff fa2c 	bl	8000c14 <HAL_PWREx_GetVoltageRange>
 80017bc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80017be:	4b1e      	ldr	r3, [pc, #120]	; (8001838 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80017c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017c2:	4a1d      	ldr	r2, [pc, #116]	; (8001838 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80017c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017c8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80017ca:	697b      	ldr	r3, [r7, #20]
 80017cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80017d0:	d10b      	bne.n	80017ea <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	2b80      	cmp	r3, #128	; 0x80
 80017d6:	d919      	bls.n	800180c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2ba0      	cmp	r3, #160	; 0xa0
 80017dc:	d902      	bls.n	80017e4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80017de:	2302      	movs	r3, #2
 80017e0:	613b      	str	r3, [r7, #16]
 80017e2:	e013      	b.n	800180c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80017e4:	2301      	movs	r3, #1
 80017e6:	613b      	str	r3, [r7, #16]
 80017e8:	e010      	b.n	800180c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2b80      	cmp	r3, #128	; 0x80
 80017ee:	d902      	bls.n	80017f6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80017f0:	2303      	movs	r3, #3
 80017f2:	613b      	str	r3, [r7, #16]
 80017f4:	e00a      	b.n	800180c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	2b80      	cmp	r3, #128	; 0x80
 80017fa:	d102      	bne.n	8001802 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80017fc:	2302      	movs	r3, #2
 80017fe:	613b      	str	r3, [r7, #16]
 8001800:	e004      	b.n	800180c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2b70      	cmp	r3, #112	; 0x70
 8001806:	d101      	bne.n	800180c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001808:	2301      	movs	r3, #1
 800180a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800180c:	4b0b      	ldr	r3, [pc, #44]	; (800183c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f023 0207 	bic.w	r2, r3, #7
 8001814:	4909      	ldr	r1, [pc, #36]	; (800183c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001816:	693b      	ldr	r3, [r7, #16]
 8001818:	4313      	orrs	r3, r2
 800181a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800181c:	4b07      	ldr	r3, [pc, #28]	; (800183c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f003 0307 	and.w	r3, r3, #7
 8001824:	693a      	ldr	r2, [r7, #16]
 8001826:	429a      	cmp	r2, r3
 8001828:	d001      	beq.n	800182e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800182a:	2301      	movs	r3, #1
 800182c:	e000      	b.n	8001830 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800182e:	2300      	movs	r3, #0
}
 8001830:	4618      	mov	r0, r3
 8001832:	3718      	adds	r7, #24
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}
 8001838:	40021000 	.word	0x40021000
 800183c:	40022000 	.word	0x40022000

08001840 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b082      	sub	sp, #8
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d101      	bne.n	8001852 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800184e:	2301      	movs	r3, #1
 8001850:	e01d      	b.n	800188e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001858:	b2db      	uxtb	r3, r3
 800185a:	2b00      	cmp	r3, #0
 800185c:	d106      	bne.n	800186c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	2200      	movs	r2, #0
 8001862:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001866:	6878      	ldr	r0, [r7, #4]
 8001868:	f7fe fdbc 	bl	80003e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2202      	movs	r2, #2
 8001870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681a      	ldr	r2, [r3, #0]
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	3304      	adds	r3, #4
 800187c:	4619      	mov	r1, r3
 800187e:	4610      	mov	r0, r2
 8001880:	f000 fa34 	bl	8001cec <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2201      	movs	r2, #1
 8001888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800188c:	2300      	movs	r3, #0
}
 800188e:	4618      	mov	r0, r3
 8001890:	3708      	adds	r7, #8
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
	...

08001898 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001898:	b480      	push	{r7}
 800189a:	b085      	sub	sp, #20
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	68da      	ldr	r2, [r3, #12]
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f042 0201 	orr.w	r2, r2, #1
 80018ae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	689a      	ldr	r2, [r3, #8]
 80018b6:	4b0c      	ldr	r3, [pc, #48]	; (80018e8 <HAL_TIM_Base_Start_IT+0x50>)
 80018b8:	4013      	ands	r3, r2
 80018ba:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	2b06      	cmp	r3, #6
 80018c0:	d00b      	beq.n	80018da <HAL_TIM_Base_Start_IT+0x42>
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018c8:	d007      	beq.n	80018da <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	681a      	ldr	r2, [r3, #0]
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f042 0201 	orr.w	r2, r2, #1
 80018d8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80018da:	2300      	movs	r3, #0
}
 80018dc:	4618      	mov	r0, r3
 80018de:	3714      	adds	r7, #20
 80018e0:	46bd      	mov	sp, r7
 80018e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e6:	4770      	bx	lr
 80018e8:	00010007 	.word	0x00010007

080018ec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b082      	sub	sp, #8
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	691b      	ldr	r3, [r3, #16]
 80018fa:	f003 0302 	and.w	r3, r3, #2
 80018fe:	2b02      	cmp	r3, #2
 8001900:	d122      	bne.n	8001948 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	68db      	ldr	r3, [r3, #12]
 8001908:	f003 0302 	and.w	r3, r3, #2
 800190c:	2b02      	cmp	r3, #2
 800190e:	d11b      	bne.n	8001948 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f06f 0202 	mvn.w	r2, #2
 8001918:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2201      	movs	r2, #1
 800191e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	699b      	ldr	r3, [r3, #24]
 8001926:	f003 0303 	and.w	r3, r3, #3
 800192a:	2b00      	cmp	r3, #0
 800192c:	d003      	beq.n	8001936 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800192e:	6878      	ldr	r0, [r7, #4]
 8001930:	f000 f9be 	bl	8001cb0 <HAL_TIM_IC_CaptureCallback>
 8001934:	e005      	b.n	8001942 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001936:	6878      	ldr	r0, [r7, #4]
 8001938:	f000 f9b0 	bl	8001c9c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800193c:	6878      	ldr	r0, [r7, #4]
 800193e:	f000 f9c1 	bl	8001cc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2200      	movs	r2, #0
 8001946:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	691b      	ldr	r3, [r3, #16]
 800194e:	f003 0304 	and.w	r3, r3, #4
 8001952:	2b04      	cmp	r3, #4
 8001954:	d122      	bne.n	800199c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	68db      	ldr	r3, [r3, #12]
 800195c:	f003 0304 	and.w	r3, r3, #4
 8001960:	2b04      	cmp	r3, #4
 8001962:	d11b      	bne.n	800199c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f06f 0204 	mvn.w	r2, #4
 800196c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2202      	movs	r2, #2
 8001972:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	699b      	ldr	r3, [r3, #24]
 800197a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800197e:	2b00      	cmp	r3, #0
 8001980:	d003      	beq.n	800198a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001982:	6878      	ldr	r0, [r7, #4]
 8001984:	f000 f994 	bl	8001cb0 <HAL_TIM_IC_CaptureCallback>
 8001988:	e005      	b.n	8001996 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800198a:	6878      	ldr	r0, [r7, #4]
 800198c:	f000 f986 	bl	8001c9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001990:	6878      	ldr	r0, [r7, #4]
 8001992:	f000 f997 	bl	8001cc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2200      	movs	r2, #0
 800199a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	691b      	ldr	r3, [r3, #16]
 80019a2:	f003 0308 	and.w	r3, r3, #8
 80019a6:	2b08      	cmp	r3, #8
 80019a8:	d122      	bne.n	80019f0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	68db      	ldr	r3, [r3, #12]
 80019b0:	f003 0308 	and.w	r3, r3, #8
 80019b4:	2b08      	cmp	r3, #8
 80019b6:	d11b      	bne.n	80019f0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f06f 0208 	mvn.w	r2, #8
 80019c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	2204      	movs	r2, #4
 80019c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	69db      	ldr	r3, [r3, #28]
 80019ce:	f003 0303 	and.w	r3, r3, #3
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d003      	beq.n	80019de <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80019d6:	6878      	ldr	r0, [r7, #4]
 80019d8:	f000 f96a 	bl	8001cb0 <HAL_TIM_IC_CaptureCallback>
 80019dc:	e005      	b.n	80019ea <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80019de:	6878      	ldr	r0, [r7, #4]
 80019e0:	f000 f95c 	bl	8001c9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80019e4:	6878      	ldr	r0, [r7, #4]
 80019e6:	f000 f96d 	bl	8001cc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2200      	movs	r2, #0
 80019ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	691b      	ldr	r3, [r3, #16]
 80019f6:	f003 0310 	and.w	r3, r3, #16
 80019fa:	2b10      	cmp	r3, #16
 80019fc:	d122      	bne.n	8001a44 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	68db      	ldr	r3, [r3, #12]
 8001a04:	f003 0310 	and.w	r3, r3, #16
 8001a08:	2b10      	cmp	r3, #16
 8001a0a:	d11b      	bne.n	8001a44 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f06f 0210 	mvn.w	r2, #16
 8001a14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2208      	movs	r2, #8
 8001a1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	69db      	ldr	r3, [r3, #28]
 8001a22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d003      	beq.n	8001a32 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001a2a:	6878      	ldr	r0, [r7, #4]
 8001a2c:	f000 f940 	bl	8001cb0 <HAL_TIM_IC_CaptureCallback>
 8001a30:	e005      	b.n	8001a3e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a32:	6878      	ldr	r0, [r7, #4]
 8001a34:	f000 f932 	bl	8001c9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a38:	6878      	ldr	r0, [r7, #4]
 8001a3a:	f000 f943 	bl	8001cc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	2200      	movs	r2, #0
 8001a42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	691b      	ldr	r3, [r3, #16]
 8001a4a:	f003 0301 	and.w	r3, r3, #1
 8001a4e:	2b01      	cmp	r3, #1
 8001a50:	d10e      	bne.n	8001a70 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	68db      	ldr	r3, [r3, #12]
 8001a58:	f003 0301 	and.w	r3, r3, #1
 8001a5c:	2b01      	cmp	r3, #1
 8001a5e:	d107      	bne.n	8001a70 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f06f 0201 	mvn.w	r2, #1
 8001a68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001a6a:	6878      	ldr	r0, [r7, #4]
 8001a6c:	f7fe fbac 	bl	80001c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	691b      	ldr	r3, [r3, #16]
 8001a76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a7a:	2b80      	cmp	r3, #128	; 0x80
 8001a7c:	d10e      	bne.n	8001a9c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	68db      	ldr	r3, [r3, #12]
 8001a84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a88:	2b80      	cmp	r3, #128	; 0x80
 8001a8a:	d107      	bne.n	8001a9c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001a94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001a96:	6878      	ldr	r0, [r7, #4]
 8001a98:	f000 faee 	bl	8002078 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	691b      	ldr	r3, [r3, #16]
 8001aa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001aa6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001aaa:	d10e      	bne.n	8001aca <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	68db      	ldr	r3, [r3, #12]
 8001ab2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ab6:	2b80      	cmp	r3, #128	; 0x80
 8001ab8:	d107      	bne.n	8001aca <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8001ac2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8001ac4:	6878      	ldr	r0, [r7, #4]
 8001ac6:	f000 fae1 	bl	800208c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	691b      	ldr	r3, [r3, #16]
 8001ad0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ad4:	2b40      	cmp	r3, #64	; 0x40
 8001ad6:	d10e      	bne.n	8001af6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	68db      	ldr	r3, [r3, #12]
 8001ade:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ae2:	2b40      	cmp	r3, #64	; 0x40
 8001ae4:	d107      	bne.n	8001af6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001aee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001af0:	6878      	ldr	r0, [r7, #4]
 8001af2:	f000 f8f1 	bl	8001cd8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	691b      	ldr	r3, [r3, #16]
 8001afc:	f003 0320 	and.w	r3, r3, #32
 8001b00:	2b20      	cmp	r3, #32
 8001b02:	d10e      	bne.n	8001b22 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	68db      	ldr	r3, [r3, #12]
 8001b0a:	f003 0320 	and.w	r3, r3, #32
 8001b0e:	2b20      	cmp	r3, #32
 8001b10:	d107      	bne.n	8001b22 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f06f 0220 	mvn.w	r2, #32
 8001b1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001b1c:	6878      	ldr	r0, [r7, #4]
 8001b1e:	f000 faa1 	bl	8002064 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001b22:	bf00      	nop
 8001b24:	3708      	adds	r7, #8
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}

08001b2a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001b2a:	b580      	push	{r7, lr}
 8001b2c:	b084      	sub	sp, #16
 8001b2e:	af00      	add	r7, sp, #0
 8001b30:	6078      	str	r0, [r7, #4]
 8001b32:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b3a:	2b01      	cmp	r3, #1
 8001b3c:	d101      	bne.n	8001b42 <HAL_TIM_ConfigClockSource+0x18>
 8001b3e:	2302      	movs	r3, #2
 8001b40:	e0a8      	b.n	8001c94 <HAL_TIM_ConfigClockSource+0x16a>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2201      	movs	r2, #1
 8001b46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2202      	movs	r2, #2
 8001b4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	689b      	ldr	r3, [r3, #8]
 8001b58:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b60:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001b64:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001b6c:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	68fa      	ldr	r2, [r7, #12]
 8001b74:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	2b40      	cmp	r3, #64	; 0x40
 8001b7c:	d067      	beq.n	8001c4e <HAL_TIM_ConfigClockSource+0x124>
 8001b7e:	2b40      	cmp	r3, #64	; 0x40
 8001b80:	d80b      	bhi.n	8001b9a <HAL_TIM_ConfigClockSource+0x70>
 8001b82:	2b10      	cmp	r3, #16
 8001b84:	d073      	beq.n	8001c6e <HAL_TIM_ConfigClockSource+0x144>
 8001b86:	2b10      	cmp	r3, #16
 8001b88:	d802      	bhi.n	8001b90 <HAL_TIM_ConfigClockSource+0x66>
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d06f      	beq.n	8001c6e <HAL_TIM_ConfigClockSource+0x144>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8001b8e:	e078      	b.n	8001c82 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8001b90:	2b20      	cmp	r3, #32
 8001b92:	d06c      	beq.n	8001c6e <HAL_TIM_ConfigClockSource+0x144>
 8001b94:	2b30      	cmp	r3, #48	; 0x30
 8001b96:	d06a      	beq.n	8001c6e <HAL_TIM_ConfigClockSource+0x144>
      break;
 8001b98:	e073      	b.n	8001c82 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8001b9a:	2b70      	cmp	r3, #112	; 0x70
 8001b9c:	d00d      	beq.n	8001bba <HAL_TIM_ConfigClockSource+0x90>
 8001b9e:	2b70      	cmp	r3, #112	; 0x70
 8001ba0:	d804      	bhi.n	8001bac <HAL_TIM_ConfigClockSource+0x82>
 8001ba2:	2b50      	cmp	r3, #80	; 0x50
 8001ba4:	d033      	beq.n	8001c0e <HAL_TIM_ConfigClockSource+0xe4>
 8001ba6:	2b60      	cmp	r3, #96	; 0x60
 8001ba8:	d041      	beq.n	8001c2e <HAL_TIM_ConfigClockSource+0x104>
      break;
 8001baa:	e06a      	b.n	8001c82 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8001bac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001bb0:	d066      	beq.n	8001c80 <HAL_TIM_ConfigClockSource+0x156>
 8001bb2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001bb6:	d017      	beq.n	8001be8 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 8001bb8:	e063      	b.n	8001c82 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6818      	ldr	r0, [r3, #0]
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	6899      	ldr	r1, [r3, #8]
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	685a      	ldr	r2, [r3, #4]
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	68db      	ldr	r3, [r3, #12]
 8001bca:	f000 f9a3 	bl	8001f14 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	689b      	ldr	r3, [r3, #8]
 8001bd4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001bdc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	68fa      	ldr	r2, [r7, #12]
 8001be4:	609a      	str	r2, [r3, #8]
      break;
 8001be6:	e04c      	b.n	8001c82 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6818      	ldr	r0, [r3, #0]
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	6899      	ldr	r1, [r3, #8]
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	685a      	ldr	r2, [r3, #4]
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	68db      	ldr	r3, [r3, #12]
 8001bf8:	f000 f98c 	bl	8001f14 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	689a      	ldr	r2, [r3, #8]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001c0a:	609a      	str	r2, [r3, #8]
      break;
 8001c0c:	e039      	b.n	8001c82 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6818      	ldr	r0, [r3, #0]
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	6859      	ldr	r1, [r3, #4]
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	68db      	ldr	r3, [r3, #12]
 8001c1a:	461a      	mov	r2, r3
 8001c1c:	f000 f900 	bl	8001e20 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	2150      	movs	r1, #80	; 0x50
 8001c26:	4618      	mov	r0, r3
 8001c28:	f000 f959 	bl	8001ede <TIM_ITRx_SetConfig>
      break;
 8001c2c:	e029      	b.n	8001c82 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6818      	ldr	r0, [r3, #0]
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	6859      	ldr	r1, [r3, #4]
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	68db      	ldr	r3, [r3, #12]
 8001c3a:	461a      	mov	r2, r3
 8001c3c:	f000 f91f 	bl	8001e7e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	2160      	movs	r1, #96	; 0x60
 8001c46:	4618      	mov	r0, r3
 8001c48:	f000 f949 	bl	8001ede <TIM_ITRx_SetConfig>
      break;
 8001c4c:	e019      	b.n	8001c82 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6818      	ldr	r0, [r3, #0]
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	6859      	ldr	r1, [r3, #4]
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	68db      	ldr	r3, [r3, #12]
 8001c5a:	461a      	mov	r2, r3
 8001c5c:	f000 f8e0 	bl	8001e20 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	2140      	movs	r1, #64	; 0x40
 8001c66:	4618      	mov	r0, r3
 8001c68:	f000 f939 	bl	8001ede <TIM_ITRx_SetConfig>
      break;
 8001c6c:	e009      	b.n	8001c82 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681a      	ldr	r2, [r3, #0]
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4619      	mov	r1, r3
 8001c78:	4610      	mov	r0, r2
 8001c7a:	f000 f930 	bl	8001ede <TIM_ITRx_SetConfig>
      break;
 8001c7e:	e000      	b.n	8001c82 <HAL_TIM_ConfigClockSource+0x158>
      break;
 8001c80:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2201      	movs	r2, #1
 8001c86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001c92:	2300      	movs	r3, #0
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	3710      	adds	r7, #16
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}

08001c9c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b083      	sub	sp, #12
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001ca4:	bf00      	nop
 8001ca6:	370c      	adds	r7, #12
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cae:	4770      	bx	lr

08001cb0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b083      	sub	sp, #12
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001cb8:	bf00      	nop
 8001cba:	370c      	adds	r7, #12
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc2:	4770      	bx	lr

08001cc4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b083      	sub	sp, #12
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001ccc:	bf00      	nop
 8001cce:	370c      	adds	r7, #12
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd6:	4770      	bx	lr

08001cd8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b083      	sub	sp, #12
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001ce0:	bf00      	nop
 8001ce2:	370c      	adds	r7, #12
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cea:	4770      	bx	lr

08001cec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b085      	sub	sp, #20
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
 8001cf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	4a40      	ldr	r2, [pc, #256]	; (8001e00 <TIM_Base_SetConfig+0x114>)
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d013      	beq.n	8001d2c <TIM_Base_SetConfig+0x40>
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d0a:	d00f      	beq.n	8001d2c <TIM_Base_SetConfig+0x40>
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	4a3d      	ldr	r2, [pc, #244]	; (8001e04 <TIM_Base_SetConfig+0x118>)
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d00b      	beq.n	8001d2c <TIM_Base_SetConfig+0x40>
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	4a3c      	ldr	r2, [pc, #240]	; (8001e08 <TIM_Base_SetConfig+0x11c>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d007      	beq.n	8001d2c <TIM_Base_SetConfig+0x40>
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	4a3b      	ldr	r2, [pc, #236]	; (8001e0c <TIM_Base_SetConfig+0x120>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d003      	beq.n	8001d2c <TIM_Base_SetConfig+0x40>
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	4a3a      	ldr	r2, [pc, #232]	; (8001e10 <TIM_Base_SetConfig+0x124>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d108      	bne.n	8001d3e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d32:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	68fa      	ldr	r2, [r7, #12]
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	4a2f      	ldr	r2, [pc, #188]	; (8001e00 <TIM_Base_SetConfig+0x114>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d01f      	beq.n	8001d86 <TIM_Base_SetConfig+0x9a>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d4c:	d01b      	beq.n	8001d86 <TIM_Base_SetConfig+0x9a>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	4a2c      	ldr	r2, [pc, #176]	; (8001e04 <TIM_Base_SetConfig+0x118>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d017      	beq.n	8001d86 <TIM_Base_SetConfig+0x9a>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	4a2b      	ldr	r2, [pc, #172]	; (8001e08 <TIM_Base_SetConfig+0x11c>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d013      	beq.n	8001d86 <TIM_Base_SetConfig+0x9a>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	4a2a      	ldr	r2, [pc, #168]	; (8001e0c <TIM_Base_SetConfig+0x120>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d00f      	beq.n	8001d86 <TIM_Base_SetConfig+0x9a>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	4a29      	ldr	r2, [pc, #164]	; (8001e10 <TIM_Base_SetConfig+0x124>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d00b      	beq.n	8001d86 <TIM_Base_SetConfig+0x9a>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	4a28      	ldr	r2, [pc, #160]	; (8001e14 <TIM_Base_SetConfig+0x128>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d007      	beq.n	8001d86 <TIM_Base_SetConfig+0x9a>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	4a27      	ldr	r2, [pc, #156]	; (8001e18 <TIM_Base_SetConfig+0x12c>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d003      	beq.n	8001d86 <TIM_Base_SetConfig+0x9a>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	4a26      	ldr	r2, [pc, #152]	; (8001e1c <TIM_Base_SetConfig+0x130>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d108      	bne.n	8001d98 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	68db      	ldr	r3, [r3, #12]
 8001d92:	68fa      	ldr	r2, [r7, #12]
 8001d94:	4313      	orrs	r3, r2
 8001d96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	695b      	ldr	r3, [r3, #20]
 8001da2:	4313      	orrs	r3, r2
 8001da4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	68fa      	ldr	r2, [r7, #12]
 8001daa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	689a      	ldr	r2, [r3, #8]
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	681a      	ldr	r2, [r3, #0]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	4a10      	ldr	r2, [pc, #64]	; (8001e00 <TIM_Base_SetConfig+0x114>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d00f      	beq.n	8001de4 <TIM_Base_SetConfig+0xf8>
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	4a12      	ldr	r2, [pc, #72]	; (8001e10 <TIM_Base_SetConfig+0x124>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d00b      	beq.n	8001de4 <TIM_Base_SetConfig+0xf8>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	4a11      	ldr	r2, [pc, #68]	; (8001e14 <TIM_Base_SetConfig+0x128>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d007      	beq.n	8001de4 <TIM_Base_SetConfig+0xf8>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	4a10      	ldr	r2, [pc, #64]	; (8001e18 <TIM_Base_SetConfig+0x12c>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d003      	beq.n	8001de4 <TIM_Base_SetConfig+0xf8>
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	4a0f      	ldr	r2, [pc, #60]	; (8001e1c <TIM_Base_SetConfig+0x130>)
 8001de0:	4293      	cmp	r3, r2
 8001de2:	d103      	bne.n	8001dec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	691a      	ldr	r2, [r3, #16]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2201      	movs	r2, #1
 8001df0:	615a      	str	r2, [r3, #20]
}
 8001df2:	bf00      	nop
 8001df4:	3714      	adds	r7, #20
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr
 8001dfe:	bf00      	nop
 8001e00:	40012c00 	.word	0x40012c00
 8001e04:	40000400 	.word	0x40000400
 8001e08:	40000800 	.word	0x40000800
 8001e0c:	40000c00 	.word	0x40000c00
 8001e10:	40013400 	.word	0x40013400
 8001e14:	40014000 	.word	0x40014000
 8001e18:	40014400 	.word	0x40014400
 8001e1c:	40014800 	.word	0x40014800

08001e20 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b087      	sub	sp, #28
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	60f8      	str	r0, [r7, #12]
 8001e28:	60b9      	str	r1, [r7, #8]
 8001e2a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	6a1b      	ldr	r3, [r3, #32]
 8001e30:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	6a1b      	ldr	r3, [r3, #32]
 8001e36:	f023 0201 	bic.w	r2, r3, #1
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	699b      	ldr	r3, [r3, #24]
 8001e42:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001e44:	693b      	ldr	r3, [r7, #16]
 8001e46:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001e4a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	011b      	lsls	r3, r3, #4
 8001e50:	693a      	ldr	r2, [r7, #16]
 8001e52:	4313      	orrs	r3, r2
 8001e54:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001e56:	697b      	ldr	r3, [r7, #20]
 8001e58:	f023 030a 	bic.w	r3, r3, #10
 8001e5c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8001e5e:	697a      	ldr	r2, [r7, #20]
 8001e60:	68bb      	ldr	r3, [r7, #8]
 8001e62:	4313      	orrs	r3, r2
 8001e64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	693a      	ldr	r2, [r7, #16]
 8001e6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	697a      	ldr	r2, [r7, #20]
 8001e70:	621a      	str	r2, [r3, #32]
}
 8001e72:	bf00      	nop
 8001e74:	371c      	adds	r7, #28
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr

08001e7e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001e7e:	b480      	push	{r7}
 8001e80:	b087      	sub	sp, #28
 8001e82:	af00      	add	r7, sp, #0
 8001e84:	60f8      	str	r0, [r7, #12]
 8001e86:	60b9      	str	r1, [r7, #8]
 8001e88:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	6a1b      	ldr	r3, [r3, #32]
 8001e8e:	f023 0210 	bic.w	r2, r3, #16
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	699b      	ldr	r3, [r3, #24]
 8001e9a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	6a1b      	ldr	r3, [r3, #32]
 8001ea0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001ea2:	697b      	ldr	r3, [r7, #20]
 8001ea4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001ea8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	031b      	lsls	r3, r3, #12
 8001eae:	697a      	ldr	r2, [r7, #20]
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001eb4:	693b      	ldr	r3, [r7, #16]
 8001eb6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001eba:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8001ebc:	68bb      	ldr	r3, [r7, #8]
 8001ebe:	011b      	lsls	r3, r3, #4
 8001ec0:	693a      	ldr	r2, [r7, #16]
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	697a      	ldr	r2, [r7, #20]
 8001eca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	693a      	ldr	r2, [r7, #16]
 8001ed0:	621a      	str	r2, [r3, #32]
}
 8001ed2:	bf00      	nop
 8001ed4:	371c      	adds	r7, #28
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr

08001ede <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8001ede:	b480      	push	{r7}
 8001ee0:	b085      	sub	sp, #20
 8001ee2:	af00      	add	r7, sp, #0
 8001ee4:	6078      	str	r0, [r7, #4]
 8001ee6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	689b      	ldr	r3, [r3, #8]
 8001eec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ef4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001ef6:	683a      	ldr	r2, [r7, #0]
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	4313      	orrs	r3, r2
 8001efc:	f043 0307 	orr.w	r3, r3, #7
 8001f00:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	68fa      	ldr	r2, [r7, #12]
 8001f06:	609a      	str	r2, [r3, #8]
}
 8001f08:	bf00      	nop
 8001f0a:	3714      	adds	r7, #20
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f12:	4770      	bx	lr

08001f14 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b087      	sub	sp, #28
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	60f8      	str	r0, [r7, #12]
 8001f1c:	60b9      	str	r1, [r7, #8]
 8001f1e:	607a      	str	r2, [r7, #4]
 8001f20:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	689b      	ldr	r3, [r3, #8]
 8001f26:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001f28:	697b      	ldr	r3, [r7, #20]
 8001f2a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001f2e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	021a      	lsls	r2, r3, #8
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	431a      	orrs	r2, r3
 8001f38:	68bb      	ldr	r3, [r7, #8]
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	697a      	ldr	r2, [r7, #20]
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	697a      	ldr	r2, [r7, #20]
 8001f46:	609a      	str	r2, [r3, #8]
}
 8001f48:	bf00      	nop
 8001f4a:	371c      	adds	r7, #28
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f52:	4770      	bx	lr

08001f54 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b085      	sub	sp, #20
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
 8001f5c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f64:	2b01      	cmp	r3, #1
 8001f66:	d101      	bne.n	8001f6c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001f68:	2302      	movs	r3, #2
 8001f6a:	e068      	b.n	800203e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2201      	movs	r2, #1
 8001f70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2202      	movs	r2, #2
 8001f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	689b      	ldr	r3, [r3, #8]
 8001f8a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a2e      	ldr	r2, [pc, #184]	; (800204c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d004      	beq.n	8001fa0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4a2d      	ldr	r2, [pc, #180]	; (8002050 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d108      	bne.n	8001fb2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8001fa6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	68fa      	ldr	r2, [r7, #12]
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001fb8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	68fa      	ldr	r2, [r7, #12]
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	68fa      	ldr	r2, [r7, #12]
 8001fca:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a1e      	ldr	r2, [pc, #120]	; (800204c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d01d      	beq.n	8002012 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fde:	d018      	beq.n	8002012 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a1b      	ldr	r2, [pc, #108]	; (8002054 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d013      	beq.n	8002012 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a1a      	ldr	r2, [pc, #104]	; (8002058 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d00e      	beq.n	8002012 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a18      	ldr	r2, [pc, #96]	; (800205c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d009      	beq.n	8002012 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4a13      	ldr	r2, [pc, #76]	; (8002050 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d004      	beq.n	8002012 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a14      	ldr	r2, [pc, #80]	; (8002060 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d10c      	bne.n	800202c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002012:	68bb      	ldr	r3, [r7, #8]
 8002014:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002018:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	689b      	ldr	r3, [r3, #8]
 800201e:	68ba      	ldr	r2, [r7, #8]
 8002020:	4313      	orrs	r3, r2
 8002022:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	68ba      	ldr	r2, [r7, #8]
 800202a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2201      	movs	r2, #1
 8002030:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2200      	movs	r2, #0
 8002038:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800203c:	2300      	movs	r3, #0
}
 800203e:	4618      	mov	r0, r3
 8002040:	3714      	adds	r7, #20
 8002042:	46bd      	mov	sp, r7
 8002044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002048:	4770      	bx	lr
 800204a:	bf00      	nop
 800204c:	40012c00 	.word	0x40012c00
 8002050:	40013400 	.word	0x40013400
 8002054:	40000400 	.word	0x40000400
 8002058:	40000800 	.word	0x40000800
 800205c:	40000c00 	.word	0x40000c00
 8002060:	40014000 	.word	0x40014000

08002064 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002064:	b480      	push	{r7}
 8002066:	b083      	sub	sp, #12
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800206c:	bf00      	nop
 800206e:	370c      	adds	r7, #12
 8002070:	46bd      	mov	sp, r7
 8002072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002076:	4770      	bx	lr

08002078 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002078:	b480      	push	{r7}
 800207a:	b083      	sub	sp, #12
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002080:	bf00      	nop
 8002082:	370c      	adds	r7, #12
 8002084:	46bd      	mov	sp, r7
 8002086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208a:	4770      	bx	lr

0800208c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800208c:	b480      	push	{r7}
 800208e:	b083      	sub	sp, #12
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002094:	bf00      	nop
 8002096:	370c      	adds	r7, #12
 8002098:	46bd      	mov	sp, r7
 800209a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209e:	4770      	bx	lr

080020a0 <__libc_init_array>:
 80020a0:	b570      	push	{r4, r5, r6, lr}
 80020a2:	4e0d      	ldr	r6, [pc, #52]	; (80020d8 <__libc_init_array+0x38>)
 80020a4:	4c0d      	ldr	r4, [pc, #52]	; (80020dc <__libc_init_array+0x3c>)
 80020a6:	1ba4      	subs	r4, r4, r6
 80020a8:	10a4      	asrs	r4, r4, #2
 80020aa:	2500      	movs	r5, #0
 80020ac:	42a5      	cmp	r5, r4
 80020ae:	d109      	bne.n	80020c4 <__libc_init_array+0x24>
 80020b0:	4e0b      	ldr	r6, [pc, #44]	; (80020e0 <__libc_init_array+0x40>)
 80020b2:	4c0c      	ldr	r4, [pc, #48]	; (80020e4 <__libc_init_array+0x44>)
 80020b4:	f000 f820 	bl	80020f8 <_init>
 80020b8:	1ba4      	subs	r4, r4, r6
 80020ba:	10a4      	asrs	r4, r4, #2
 80020bc:	2500      	movs	r5, #0
 80020be:	42a5      	cmp	r5, r4
 80020c0:	d105      	bne.n	80020ce <__libc_init_array+0x2e>
 80020c2:	bd70      	pop	{r4, r5, r6, pc}
 80020c4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80020c8:	4798      	blx	r3
 80020ca:	3501      	adds	r5, #1
 80020cc:	e7ee      	b.n	80020ac <__libc_init_array+0xc>
 80020ce:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80020d2:	4798      	blx	r3
 80020d4:	3501      	adds	r5, #1
 80020d6:	e7f2      	b.n	80020be <__libc_init_array+0x1e>
 80020d8:	08002150 	.word	0x08002150
 80020dc:	08002150 	.word	0x08002150
 80020e0:	08002150 	.word	0x08002150
 80020e4:	08002154 	.word	0x08002154

080020e8 <memset>:
 80020e8:	4402      	add	r2, r0
 80020ea:	4603      	mov	r3, r0
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d100      	bne.n	80020f2 <memset+0xa>
 80020f0:	4770      	bx	lr
 80020f2:	f803 1b01 	strb.w	r1, [r3], #1
 80020f6:	e7f9      	b.n	80020ec <memset+0x4>

080020f8 <_init>:
 80020f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020fa:	bf00      	nop
 80020fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80020fe:	bc08      	pop	{r3}
 8002100:	469e      	mov	lr, r3
 8002102:	4770      	bx	lr

08002104 <_fini>:
 8002104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002106:	bf00      	nop
 8002108:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800210a:	bc08      	pop	{r3}
 800210c:	469e      	mov	lr, r3
 800210e:	4770      	bx	lr
